# Palkeoramix decompiler. 

def storage:
  owner is addr at storage 0
  stor1 is mapping of uint8 at storage 1
  stor2 is uint256 at storage 2
  open is uint8 at storage 3
  unknown40d72236Address is addr at storage 3 offset 8
  unknown3ea3c409Address is addr at storage 4
  unknownb44a4308Address is addr at storage 5
  unknowncb9b66a7Address is addr at storage 6
  unknownbe7cadfaAddress is addr at storage 7
  unknown1deaf5cd is uint256 at storage 8
  unknownf3a6c04f is uint256 at storage 9
  unknown140f3bd8 is uint256 at storage 10
  unknown1cacf693 is uint256 at storage 11
  unknown35c46a63 is uint256 at storage 12
  unknown77bbaf8b is uint256 at storage 13
  unknown0ea30489 is uint256 at storage 14
  unknown5e745bde is uint256 at storage 15
  unknown89d4cce8 is uint256 at storage 16
  changeAmount is uint256 at storage 17
  unknown1950833a is uint256 at storage 18
  unknownbf383450 is uint256 at storage 19
  unknowne0dabadd is uint256 at storage 20
  tokenAddr is addr at storage 21
  lockTime is uint256 at storage 22
  unknowndf1e4fe2Address is addr at storage 23
  unknown1554e1ceAddress is addr at storage 24
  stor25 is uint32 at storage 25
  unknownaf589da3Address is addr at storage 25
  fee is uint32 at storage 26 offset 160
  priceAddress is addr at storage 26
  unknowncf6744af is mapping of struct at storage 27
  unknown36d461a3 is mapping of struct at storage 28
  unknownbe74c2b7 is mapping of addr at storage 29

def lockTime(): # not payable
  return lockTime

def unknown0ea30489(): # not payable
  return unknown0ea30489

def getprice(): # not payable
  return priceAddress

def unknown140f3bd8(): # not payable
  return unknown140f3bd8

def unknown1554e1ce(): # not payable
  return unknown1554e1ceAddress

def unknown1950833a(): # not payable
  return unknown1950833a

def userInfo(address _user): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _user == _user
  return unknowncf6744af[_user].field_0, unknowncf6744af[_user].field_256, unknowncf6744af[_user].field_512

def unknown1cacf693(): # not payable
  return unknown1cacf693

def unknown1deaf5cd(): # not payable
  return unknown1deaf5cd

def unknown35c46a63(): # not payable
  return unknown35c46a63

def unknown36d461a3(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >=ΓÇ▓ 64
  require _param1 == addr(_param1)
  require _param2 == uint8(_param2)
  return unknown36d461a3[addr(_param1)][1][_param2 << 248].field_0, 
         unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256,
         unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512,
         unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768

def unknown3ea3c409(): # not payable
  return unknown3ea3c409Address

def unknown40d72236(): # not payable
  return unknown40d72236Address

def unknown509222cd(uint256 _param1): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _param1 == addr(_param1)
  return bool(unknowncf6744af[addr(_param1)].field_256)

def unknown5e745bde(): # not payable
  return unknown5e745bde

def tokenAddr(): # not payable
  return tokenAddr

def unknown77bbaf8b(): # not payable
  return unknown77bbaf8b

def unknown89d4cce8(): # not payable
  return unknown89d4cce8

def owner(): # not payable
  return owner

def hasAccess(address _who): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _who == _who
  return bool(stor1[addr(_who)])

def changeAmount(): # not payable
  return changeAmount

def unknownaf589da3(): # not payable
  return addr(unknownaf589da3Address)

def unknownb325d14e(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >=ΓÇ▓ 64
  require _param1 == addr(_param1)
  require _param2 == uint8(_param2)
  return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_256, 
         unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512,
         unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768,
         unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024

def unknownb44a4308(): # not payable
  return unknownb44a4308Address

def unknownbe74c2b7(uint256 _param1): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  return unknownbe74c2b7[_param1]

def unknownbe7cadfa(): # not payable
  return unknownbe7cadfaAddress

def unknownbf383450(): # not payable
  return unknownbf383450

def unknowncb9b66a7(): # not payable
  return unknowncb9b66a7Address

def unknowncf6744af(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >=ΓÇ▓ 64
  require _param1 == addr(_param1)
  require _param2 == uint8(_param2)
  return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1280, 
         unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536,
         unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792,
         unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048

def fee(): # not payable
  return fee

def unknowndf1e4fe2(): # not payable
  return unknowndf1e4fe2Address

def unknowne0dabadd(): # not payable
  return unknowne0dabadd

def unknowne55fe8ef(uint256 _param1): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _param1 == addr(_param1)
  return unknown36d461a3[_param1].field_0

def unknownf3a6c04f(): # not payable
  return unknownf3a6c04f

def open(): # not payable
  return bool(open)

#
#  Regular functions
#

def setLockTime(uint256 _lockTIme): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  lockTime = _lockTIme
  return 1

def unknown2577339d(uint256 _param1): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  unknownbf383450 = _param1
  return 1

def renounceOwnership(): # not payable
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  log OwnershipTransferred(
        address previousOwner=owner,
        address newOwner=0)
  owner = 0

def setOpen(bool _open): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _open == _open
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  open = uint8(_open)
  return 1

def unknown0c934790(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >=ΓÇ▓ 64
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  changeAmount = _param1
  unknown1950833a = _param2
  return 1

def unknowneabb5622(uint256 _param1): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _param1 == _param1 % 16777216
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  fee = _param1 % 16777216
  return 1

def setTokenAddr(address _tokenAddr): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _tokenAddr == _tokenAddr
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  require _tokenAddr
  tokenAddr = _tokenAddr
  return 1

def unknownb9232d63(uint256 _param1): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _param1 == addr(_param1)
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  priceAddress = addr(_param1)
  return 1

def revokeAccess(address _address): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _address == _address
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  stor1[addr(_address)] = 0
  log 0xdaa6f74a: 0, _address

def grantAccess(address _v2Address): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _v2Address == _v2Address
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  stor1[addr(_v2Address)] = 1
  log 0xdaa6f74a: 1, _v2Address

def unknownecbde5e6(): # not payable
  require ext_code.size(tokenAddr)
  static call tokenAddr.balanceOf(address tokenOwner) with:
          gas gas_remaining wei
         args this.address
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=ΓÇ▓ 32
  return ext_call.return_data[0]

def getCoin(uint256 _n): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  call unknowndf1e4fe2Address with:
     value _n wei
       gas 2300 * is_zero(value) wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  return 1

def unknown43c916c9(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >=ΓÇ▓ 64
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  if 1 == _param1:
      unknown5e745bde = _param2
  else:
      if 2 == _param1:
          unknown89d4cce8 = _param2
  return 1

def transferOwnership(address _newOwner): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _newOwner == _newOwner
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  if not _newOwner:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
  log OwnershipTransferred(
        address previousOwner=owner,
        address newOwner=_newOwner)
  owner = _newOwner

def unknowncdbb4611(uint256 _param1): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _param1 == addr(_param1)
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  unknown36d461a3[addr(_param1)].field_0 = addr(_param1)
  unknowncf6744af[addr(_param1)].field_0 = addr(_param1)
  unknowncf6744af[addr(_param1)].field_256 = addr(_param1)
  return 1

def unknown38f8cf20(uint256 _param1, uint256 _param2, uint256 _param3, uint256 _param4): # not payable
  require calldata.size - 4 >=ΓÇ▓ 128
  require _param1 == addr(_param1)
  require _param3 == addr(_param3)
  require _param4 == _param4 % 16777216
  require ext_code.size(priceAddress)
  static call priceAddress.0xe9de5ee9 with:
          gas gas_remaining wei
         args 0, 0, _param2, addr(_param3), _param4 % 16777216
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=ΓÇ▓ 32
  return ext_call.return_data[0]

def getToken(uint256 _tokenId): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  require ext_code.size(tokenAddr)
  static call tokenAddr.balanceOf(address tokenOwner) with:
          gas gas_remaining wei
         args this.address
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=ΓÇ▓ 32
  if ext_call.return_data <= _tokenId:
      revert with 0, 'Insufficient funds'
  require ext_code.size(tokenAddr)
  call tokenAddr.transfer(address to, uint256 tokens) with:
       gas gas_remaining wei
      args unknowndf1e4fe2Address, _tokenId
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=ΓÇ▓ 32
  require ext_call.return_data == bool(ext_call.return_data[0])
  return 1

def unknown17150dbf(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >=ΓÇ▓ 64
  require _param1 == addr(_param1)
  require _param2 == uint8(_param2)
  return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_256, 
         unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1280,
         unknown36d461a3[addr(_param1)][1][_param2 << 248].field_0,
         unknowncf6744af[addr(_param1)][3][_param2 << 248].field_0

def unknownf785ccd0(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >=ΓÇ▓ 64
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  if 1 == _param1:
      unknown1deaf5cd = _param2
  else:
      if 2 == _param1:
          unknownf3a6c04f = _param2
      else:
          if 3 == _param1:
              unknown140f3bd8 = _param2
          else:
              if 4 == _param1:
                  unknown1cacf693 = _param2
              else:
                  if 5 == _param1:
                      unknown35c46a63 = _param2
                  else:
                      if 7 == _param1:
                          unknown77bbaf8b = _param2
                      else:
                          if 8 == _param1:
                              unknown0ea30489 = _param2
  return 1

def setAddr(uint256 _acc, address _addr): # not payable
  require calldata.size - 4 >=ΓÇ▓ 64
  require _addr == _addr
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  if 1 == _acc:
      unknown40d72236Address = _addr
  else:
      if 2 == _acc:
          unknown3ea3c409Address = _addr
      else:
          if 3 == _acc:
              unknownb44a4308Address = _addr
          else:
              if 4 == _acc:
                  unknowncb9b66a7Address = _addr
              else:
                  if 5 == _acc:
                      unknownbe7cadfaAddress = _addr
                  else:
                      if 7 == _acc:
                          tokenAddr = _addr
                      else:
                          if 8 == _acc:
                              unknowndf1e4fe2Address = _addr
                          else:
                              if 9 == _acc:
                                  unknown1554e1ceAddress = _addr
                              else:
                                  if 10 == _acc:
                                      addr(unknownaf589da3Address) = _addr
  return 1

def unknowna2a415b1(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >=ΓÇ▓ 64
  require _param1 == addr(_param1)
  require _param2 == uint8(_param2)
  if not unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
      return 0
  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 > block.timestamp:
      revert with 0, 'SafeMath: subtraction overflow'
  if block.timestamp < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
      revert with 0, 17
  if block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 < 1:
      return 0
  if not block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if 0 / lockTime <= unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          return (0 / lockTime)
  else:
      if block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 and unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512 > -1 / block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
          revert with 0, 17
      if not block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
          revert with 0, 18
      if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 != unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime <= unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          return ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime)
  return unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768

def unknown20d38229(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >=ΓÇ▓ 64
  require _param1 == addr(_param1)
  require _param2 == uint8(_param2)
  if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
      return 0
  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 > block.timestamp:
      revert with 0, 'SafeMath: subtraction overflow'
  if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512:
      revert with 0, 17
  if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 < 1:
      return 0
  if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512:
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
          return (0 / lockTime)
  else:
      if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512:
          revert with 0, 17
      if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512:
          revert with 0, 18
      if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
          return ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) / lockTime)
  return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024

def unknown996b946d(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >=ΓÇ▓ 64
  require _param1 == addr(_param1)
  require _param2 == uint8(_param2)
  if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
      return 0
  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
      revert with 0, 'SafeMath: subtraction overflow'
  if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
      revert with 0, 17
  if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
      return 0
  if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          return (0 / lockTime)
  else:
      if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
          revert with 0, 17
      if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
          revert with 0, 18
      if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          return ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime)
  return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048

def unknownadcda7ad(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >=ΓÇ▓ 64
  require _param1 == addr(_param1)
  require _param2 == uint8(_param2)
  if not unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
      if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
          revert with 0, 17
      return unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768
  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 > block.timestamp:
      revert with 0, 'SafeMath: subtraction overflow'
  if block.timestamp < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
      revert with 0, 17
  if block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 < 1:
      if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
          revert with 0, 17
      return unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768
  if not block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if 0 / lockTime <= unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          if 0 / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0 / lockTime:
              revert with 0, 17
          return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime))
  else:
      if block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 and unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512 > -1 / block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
          revert with 0, 17
      if not block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
          revert with 0, 18
      if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 != unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime <= unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
              revert with 0, 17
          return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime))
  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
      revert with 0, 'SafeMath: subtraction overflow'
  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
      revert with 0, 17
  else:
      return 0

def unknown2c79c0ae(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >=ΓÇ▓ 64
  require _param1 == addr(_param1)
  require _param2 == uint8(_param2)
  if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
      if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024 < 0:
          revert with 0, 17
      return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024
  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 > block.timestamp:
      revert with 0, 'SafeMath: subtraction overflow'
  if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512:
      revert with 0, 17
  if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 < 1:
      if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024 < 0:
          revert with 0, 17
      return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024
  if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512:
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
          if 0 / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024 < 0 / lockTime:
              revert with 0, 17
          return (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024 - (0 / lockTime))
  else:
      if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512:
          revert with 0, 17
      if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512:
          revert with 0, 18
      if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
          if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024 < (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) / lockTime:
              revert with 0, 17
          return (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) / lockTime))
  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
      revert with 0, 'SafeMath: subtraction overflow'
  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024 < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
      revert with 0, 17
  else:
      return 0

def unknown81f191de(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >=ΓÇ▓ 64
  require _param1 == addr(_param1)
  require _param2 == uint8(_param2)
  if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
      if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
          revert with 0, 17
      return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048
  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
      revert with 0, 'SafeMath: subtraction overflow'
  if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
      revert with 0, 17
  if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
      if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
          revert with 0, 17
      return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048
  if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          if 0 / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0 / lockTime:
              revert with 0, 17
          return (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime))
  else:
      if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
          revert with 0, 17
      if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
          revert with 0, 18
      if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime:
              revert with 0, 17
          return (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime))
  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
      revert with 0, 'SafeMath: subtraction overflow'
  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
      revert with 0, 17
  else:
      return 0

def unknown82eb06f9(uint256 _param1): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _param1 == uint8(_param1)
  if tx.origin != caller:
      revert with 0, 'not user'
  if not unknown36d461a3[caller][1][_param1 << 248].field_768:
      log 0xf06b551c: caller, 0, block.timestamp
      return 0
  if unknown36d461a3[caller][1][_param1 << 248].field_256 > block.timestamp:
      revert with 0, 'SafeMath: subtraction overflow'
  if block.timestamp < unknown36d461a3[caller][1][_param1 << 248].field_256:
      revert with 0, 17
  if block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256 < 1:
      log 0xf06b551c: caller, 0, block.timestamp
      return 0
  if not block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256:
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if 0 / lockTime <= unknown36d461a3[caller][1][_param1 << 248].field_768:
          if 0 / lockTime:
              require ext_code.size(tokenAddr)
              call tokenAddr.transfer(address to, uint256 tokens) with:
                   gas gas_remaining wei
                  args caller, 0 / lockTime
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              require ext_call.return_data == bool(ext_call.return_data[0])
              if 0 / lockTime > unknown36d461a3[caller][1][_param1 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[caller][1][_param1 << 248].field_768 < 0 / lockTime:
                  revert with 0, 17
              unknown36d461a3[caller][1][_param1 << 248].field_768 -= 0 / lockTime
              if 100000 < unknown36d461a3[caller][1][_param1 << 248].field_768 - (0 / lockTime):
                  unknown36d461a3[caller][1][_param1 << 248].field_256 = block.timestamp
              else:
                  unknown36d461a3[caller][1][_param1 << 248].field_512 = 0
                  unknown36d461a3[caller][1][_param1 << 248].field_768 = 0
                  unknown36d461a3[caller][1][_param1 << 248].field_256 = 0
          log 0xf06b551c: caller, 0 / lockTime, block.timestamp
          return (0 / lockTime)
  else:
      if block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256 and unknown36d461a3[caller][1][_param1 << 248].field_512 > -1 / block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256:
          revert with 0, 17
      if not block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256:
          revert with 0, 18
      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256 != unknown36d461a3[caller][1][_param1 << 248].field_512:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime <= unknown36d461a3[caller][1][_param1 << 248].field_768:
          if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
              require ext_code.size(tokenAddr)
              call tokenAddr.transfer(address to, uint256 tokens) with:
                   gas gas_remaining wei
                  args caller, (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              require ext_call.return_data == bool(ext_call.return_data[0])
              if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > unknown36d461a3[caller][1][_param1 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[caller][1][_param1 << 248].field_768 < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                  revert with 0, 17
              unknown36d461a3[caller][1][_param1 << 248].field_768 -= (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime
              if 100000 < unknown36d461a3[caller][1][_param1 << 248].field_768 - ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime):
                  unknown36d461a3[caller][1][_param1 << 248].field_256 = block.timestamp
              else:
                  unknown36d461a3[caller][1][_param1 << 248].field_512 = 0
                  unknown36d461a3[caller][1][_param1 << 248].field_768 = 0
                  unknown36d461a3[caller][1][_param1 << 248].field_256 = 0
          log 0xf06b551c: caller, (block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime, block.timestamp
          return ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime)
  if unknown36d461a3[caller][1][_param1 << 248].field_768:
      require ext_code.size(tokenAddr)
      call tokenAddr.transfer(address to, uint256 tokens) with:
           gas gas_remaining wei
          args caller, unknown36d461a3[caller][1][_param1 << 248].field_768
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >=ΓÇ▓ 32
      require ext_call.return_data == bool(ext_call.return_data[0])
      if unknown36d461a3[caller][1][_param1 << 248].field_768 > unknown36d461a3[caller][1][_param1 << 248].field_768:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
          revert with 0, 17
      unknown36d461a3[caller][1][_param1 << 248].field_768 -= unknown36d461a3[caller][1][_param1 << 248].field_768
      if 100000 < unknown36d461a3[caller][1][_param1 << 248].field_768 - unknown36d461a3[caller][1][_param1 << 248].field_768:
          unknown36d461a3[caller][1][_param1 << 248].field_256 = block.timestamp
      else:
          unknown36d461a3[caller][1][_param1 << 248].field_512 = 0
          unknown36d461a3[caller][1][_param1 << 248].field_768 = 0
          unknown36d461a3[caller][1][_param1 << 248].field_256 = 0
  log 0xf06b551c: caller, unknown36d461a3[caller]1 << 248].field_768, block.timestamp
  return unknown36d461a3[caller][1][_param1 << 248].field_768

def unknown27065ed2(uint256 _param1): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _param1 == uint8(_param1)
  if tx.origin != caller:
      revert with 0, 'not user'
  if not unknowncf6744af[caller][3][_param1 << 248].field_1024:
      log 0x79543468: caller, 0, block.timestamp
      return 0
  if unknowncf6744af[caller][3][_param1 << 248].field_512 > block.timestamp:
      revert with 0, 'SafeMath: subtraction overflow'
  if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_512:
      revert with 0, 17
  if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_512 < 1:
      log 0x79543468: caller, 0, block.timestamp
      return 0
  if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_512:
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_1024:
          if 0 / lockTime:
              require ext_code.size(tokenAddr)
              call tokenAddr.transfer(address to, uint256 tokens) with:
                   gas gas_remaining wei
                  args caller, 0 / lockTime
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              require ext_call.return_data == bool(ext_call.return_data[0])
              if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_1024:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[caller][3][_param1 << 248].field_1024 < 0 / lockTime:
                  revert with 0, 17
              unknowncf6744af[caller][3][_param1 << 248].field_1024 -= 0 / lockTime
              if 100000 < unknowncf6744af[caller][3][_param1 << 248].field_1024 - (0 / lockTime):
                  unknowncf6744af[caller][3][_param1 << 248].field_512 = block.timestamp
              else:
                  unknowncf6744af[caller][3][_param1 << 248].field_768 = 0
                  unknowncf6744af[caller][3][_param1 << 248].field_1024 = 0
                  unknowncf6744af[caller][3][_param1 << 248].field_512 = 0
          log 0x79543468: caller, 0 / lockTime, block.timestamp
          return (0 / lockTime)
  else:
      if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_512 and unknowncf6744af[caller][3][_param1 << 248].field_768 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_512:
          revert with 0, 17
      if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_512:
          revert with 0, 18
      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_768) - (unknowncf6744af[caller][3][_param1 << 248].field_512 * unknowncf6744af[caller][3][_param1 << 248].field_768) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_512 != unknowncf6744af[caller][3][_param1 << 248].field_768:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_768) - (unknowncf6744af[caller][3][_param1 << 248].field_512 * unknowncf6744af[caller][3][_param1 << 248].field_768) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_1024:
          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_768) - (unknowncf6744af[caller][3][_param1 << 248].field_512 * unknowncf6744af[caller][3][_param1 << 248].field_768) / lockTime:
              require ext_code.size(tokenAddr)
              call tokenAddr.transfer(address to, uint256 tokens) with:
                   gas gas_remaining wei
                  args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_768) - (unknowncf6744af[caller][3][_param1 << 248].field_512 * unknowncf6744af[caller][3][_param1 << 248].field_768) / lockTime
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              require ext_call.return_data == bool(ext_call.return_data[0])
              if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_768) - (unknowncf6744af[caller][3][_param1 << 248].field_512 * unknowncf6744af[caller][3][_param1 << 248].field_768) / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_1024:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[caller][3][_param1 << 248].field_1024 < (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_768) - (unknowncf6744af[caller][3][_param1 << 248].field_512 * unknowncf6744af[caller][3][_param1 << 248].field_768) / lockTime:
                  revert with 0, 17
              unknowncf6744af[caller][3][_param1 << 248].field_1024 -= (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_768) - (unknowncf6744af[caller][3][_param1 << 248].field_512 * unknowncf6744af[caller][3][_param1 << 248].field_768) / lockTime
              if 100000 < unknowncf6744af[caller][3][_param1 << 248].field_1024 - ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_768) - (unknowncf6744af[caller][3][_param1 << 248].field_512 * unknowncf6744af[caller][3][_param1 << 248].field_768) / lockTime):
                  unknowncf6744af[caller][3][_param1 << 248].field_512 = block.timestamp
              else:
                  unknowncf6744af[caller][3][_param1 << 248].field_768 = 0
                  unknowncf6744af[caller][3][_param1 << 248].field_1024 = 0
                  unknowncf6744af[caller][3][_param1 << 248].field_512 = 0
          log 0x79543468: caller, (block.timestamp * unknowncf6744af[caller]1 << 248].field_768) - (unknowncf6744af[caller]1 << 248].field_512 * unknowncf6744af[caller]1 << 248].field_768) / lockTime, block.timestamp
          return ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_768) - (unknowncf6744af[caller][3][_param1 << 248].field_512 * unknowncf6744af[caller][3][_param1 << 248].field_768) / lockTime)
  if unknowncf6744af[caller][3][_param1 << 248].field_1024:
      require ext_code.size(tokenAddr)
      call tokenAddr.transfer(address to, uint256 tokens) with:
           gas gas_remaining wei
          args caller, unknowncf6744af[caller][3][_param1 << 248].field_1024
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >=ΓÇ▓ 32
      require ext_call.return_data == bool(ext_call.return_data[0])
      if unknowncf6744af[caller][3][_param1 << 248].field_1024 > unknowncf6744af[caller][3][_param1 << 248].field_1024:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknowncf6744af[caller][3][_param1 << 248].field_1024 < unknowncf6744af[caller][3][_param1 << 248].field_1024:
          revert with 0, 17
      unknowncf6744af[caller][3][_param1 << 248].field_1024 -= unknowncf6744af[caller][3][_param1 << 248].field_1024
      if 100000 < unknowncf6744af[caller][3][_param1 << 248].field_1024 - unknowncf6744af[caller][3][_param1 << 248].field_1024:
          unknowncf6744af[caller][3][_param1 << 248].field_512 = block.timestamp
      else:
          unknowncf6744af[caller][3][_param1 << 248].field_768 = 0
          unknowncf6744af[caller][3][_param1 << 248].field_1024 = 0
          unknowncf6744af[caller][3][_param1 << 248].field_512 = 0
  log 0x79543468: caller, unknowncf6744af[caller]1 << 248].field_1024, block.timestamp
  return unknowncf6744af[caller][3][_param1 << 248].field_1024

def unknown4809fee2(uint256 _param1): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _param1 == uint8(_param1)
  if tx.origin != caller:
      revert with 0, 'not user'
  if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
      log 0x18ae5e1c: caller, 0, block.timestamp
      return 0
  if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
      revert with 0, 'SafeMath: subtraction overflow'
  if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
      revert with 0, 17
  if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
      log 0x18ae5e1c: caller, 0, block.timestamp
      return 0
  if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
          if 0 / lockTime:
              require ext_code.size(tokenAddr)
              call tokenAddr.transfer(address to, uint256 tokens) with:
                   gas gas_remaining wei
                  args caller, 0 / lockTime
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              require ext_call.return_data == bool(ext_call.return_data[0])
              if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                  revert with 0, 17
              unknowncf6744af[caller][3][_param1 << 248].field_2048 -= 0 / lockTime
              if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - (0 / lockTime):
                  unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
              else:
                  unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                  unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                  unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
          log 0x18ae5e1c: caller, 0 / lockTime, block.timestamp
          return (0 / lockTime)
  else:
      if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
          revert with 0, 17
      if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
          revert with 0, 18
      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
              require ext_code.size(tokenAddr)
              call tokenAddr.transfer(address to, uint256 tokens) with:
                   gas gas_remaining wei
                  args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              require ext_call.return_data == bool(ext_call.return_data[0])
              if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                  revert with 0, 17
              unknowncf6744af[caller][3][_param1 << 248].field_2048 -= (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
              if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                  unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
              else:
                  unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                  unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                  unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
          log 0x18ae5e1c: caller, (block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime, block.timestamp
          return ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime)
  if unknowncf6744af[caller][3][_param1 << 248].field_2048:
      require ext_code.size(tokenAddr)
      call tokenAddr.transfer(address to, uint256 tokens) with:
           gas gas_remaining wei
          args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >=ΓÇ▓ 32
      require ext_call.return_data == bool(ext_call.return_data[0])
      if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
          revert with 0, 17
      unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
      if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
          unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
      else:
          unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
          unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
          unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
  log 0x18ae5e1c: caller, unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
  return unknowncf6744af[caller][3][_param1 << 248].field_2048

def unknown77e6c422(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >=ΓÇ▓ 64
  require _param1 == addr(_param1)
  require _param2 == uint8(_param2)
  if not unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
      if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          return 0
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
          revert with 0, 'SafeMath: subtraction overflow'
      if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
          revert with 0, 17
      if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
          return 0
      if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              if 0 > !(0 / lockTime):
                  revert with 0, 17
              if 0 / lockTime < 0:
                  revert with 0, 'SafeMath: addition overflow'
              return (0 / lockTime)
      else:
          if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 17
          if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
              revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              if 0 > !((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime):
                  revert with 0, 17
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime < 0:
                  revert with 0, 'SafeMath: addition overflow'
              return ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime)
      if 0 > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          revert with 0, 17
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
          revert with 0, 'SafeMath: addition overflow'
      return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048
  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 > block.timestamp:
      revert with 0, 'SafeMath: subtraction overflow'
  if block.timestamp < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
      revert with 0, 17
  if block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 < 1:
      if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          return 0
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
          revert with 0, 'SafeMath: subtraction overflow'
      if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
          revert with 0, 17
      if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
          return 0
      if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              if 0 > !(0 / lockTime):
                  revert with 0, 17
              if 0 / lockTime < 0:
                  revert with 0, 'SafeMath: addition overflow'
              return (0 / lockTime)
      else:
          if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 17
          if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
              revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              if 0 > !((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime):
                  revert with 0, 17
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime < 0:
                  revert with 0, 'SafeMath: addition overflow'
              return ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime)
      if 0 > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          revert with 0, 17
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
          revert with 0, 'SafeMath: addition overflow'
      return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048
  if not block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if 0 / lockTime <= unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              if 0 / lockTime > -1:
                  revert with 0, 17
              if 0 / lockTime < 0 / lockTime:
                  revert with 0, 'SafeMath: addition overflow'
              return (0 / lockTime)
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
              revert with 0, 'SafeMath: subtraction overflow'
          if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 17
          if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
              if 0 / lockTime > -1:
                  revert with 0, 17
              if 0 / lockTime < 0 / lockTime:
                  revert with 0, 'SafeMath: addition overflow'
              return (0 / lockTime)
          if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if 0 / lockTime > !(0 / lockTime):
                      revert with 0, 17
                  if 2 * 0 / lockTime < 0 / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  return (2 * 0 / lockTime)
          else:
              if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 17
              if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
                  revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if 0 / lockTime > !((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime):
                      revert with 0, 17
                  if (0 / lockTime) + ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime) < 0 / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  return ((0 / lockTime) + ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime))
          if 0 / lockTime > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 17
          if (0 / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0 / lockTime:
              revert with 0, 'SafeMath: addition overflow'
          return ((0 / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
  else:
      if block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 and unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512 > -1 / block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
          revert with 0, 17
      if not block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
          revert with 0, 18
      if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 != unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime <= unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > -1:
                  revert with 0, 17
              if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                  revert with 0, 'SafeMath: addition overflow'
              return ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime)
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
              revert with 0, 'SafeMath: subtraction overflow'
          if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 17
          if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
              if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > -1:
                  revert with 0, 17
              if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                  revert with 0, 'SafeMath: addition overflow'
              return ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime)
          if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > !(0 / lockTime):
                      revert with 0, 17
                  if ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + (0 / lockTime) < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  return (((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + (0 / lockTime))
          else:
              if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 17
              if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
                  revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > !((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime):
                      revert with 0, 17
                  if ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime) < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  return (((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime))
          if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 17
          if ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
              revert with 0, 'SafeMath: addition overflow'
          return (((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
  if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > -1:
          revert with 0, 17
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          revert with 0, 'SafeMath: addition overflow'
      return unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768
  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
      revert with 0, 'SafeMath: subtraction overflow'
  if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
      revert with 0, 17
  if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > -1:
          revert with 0, 17
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          revert with 0, 'SafeMath: addition overflow'
      return unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768
  if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !(0 / lockTime):
              revert with 0, 17
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + (0 / lockTime) < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              revert with 0, 'SafeMath: addition overflow'
          return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + (0 / lockTime))
  else:
      if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
          revert with 0, 17
      if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
          revert with 0, 18
      if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime):
              revert with 0, 17
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime) < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              revert with 0, 'SafeMath: addition overflow'
          return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime))
  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
      revert with 0, 17
  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
      revert with 0, 'SafeMath: addition overflow'
  return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)

def unknown6935e2ef(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >=ΓÇ▓ 64
  require _param1 == addr(_param1)
  require _param2 == uint8(_param2)
  if not unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
      if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
              revert with 0, 17
          if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
              revert with 0, 17
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 17
          return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
          revert with 0, 'SafeMath: subtraction overflow'
      if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
          revert with 0, 17
      if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
          if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
              revert with 0, 17
          if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
              revert with 0, 17
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 17
          return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
      if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              if 0 / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0 / lockTime:
                  revert with 0, 17
              if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
                  revert with 0, 17
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime)):
                  revert with 0, 17
              return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime))
      else:
          if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 17
          if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
              revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime:
                  revert with 0, 17
              if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
                  revert with 0, 17
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime)):
                  revert with 0, 17
              return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime))
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          revert with 0, 17
      if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
          revert with 0, 17
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !0:
          revert with 0, 17
      return unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768
  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 > block.timestamp:
      revert with 0, 'SafeMath: subtraction overflow'
  if block.timestamp < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
      revert with 0, 17
  if block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 < 1:
      if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
              revert with 0, 17
          if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
              revert with 0, 17
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 17
          return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
          revert with 0, 'SafeMath: subtraction overflow'
      if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
          revert with 0, 17
      if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
          if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
              revert with 0, 17
          if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
              revert with 0, 17
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 17
          return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
      if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              if 0 / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0 / lockTime:
                  revert with 0, 17
              if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
                  revert with 0, 17
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime)):
                  revert with 0, 17
              return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime))
      else:
          if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 17
          if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
              revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime:
                  revert with 0, 17
              if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
                  revert with 0, 17
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime)):
                  revert with 0, 17
              return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime))
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          revert with 0, 17
      if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
          revert with 0, 17
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !0:
          revert with 0, 17
      return unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768
  if not block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if 0 / lockTime <= unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
                  revert with 0, 17
              if 0 / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0 / lockTime:
                  revert with 0, 17
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime) > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 17
              return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
              revert with 0, 'SafeMath: subtraction overflow'
          if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 17
          if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
              if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
                  revert with 0, 17
              if 0 / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0 / lockTime:
                  revert with 0, 17
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime) > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 17
              return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
          if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if 0 / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0 / lockTime:
                      revert with 0, 17
                  if 0 / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0 / lockTime:
                      revert with 0, 17
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime) > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime)):
                      revert with 0, 17
                  return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (2 * 0 / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
          else:
              if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 17
              if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
                  revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime:
                      revert with 0, 17
                  if 0 / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0 / lockTime:
                      revert with 0, 17
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime) > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime)):
                      revert with 0, 17
                  return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime))
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 17
          if 0 / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0 / lockTime:
              revert with 0, 17
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime) > !0:
              revert with 0, 17
          return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime))
  else:
      if block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 and unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512 > -1 / block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
          revert with 0, 17
      if not block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
          revert with 0, 18
      if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 != unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime <= unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
                  revert with 0, 17
              if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                  revert with 0, 17
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 17
              return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
              revert with 0, 'SafeMath: subtraction overflow'
          if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 17
          if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
              if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
                  revert with 0, 17
              if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                  revert with 0, 17
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 17
              return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
          if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if 0 / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0 / lockTime:
                      revert with 0, 17
                  if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                      revert with 0, 17
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime)):
                      revert with 0, 17
                  return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime))
          else:
              if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 17
              if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
                  revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime:
                      revert with 0, 17
                  if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                      revert with 0, 17
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime)):
                      revert with 0, 17
                  return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime))
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 17
          if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
              revert with 0, 17
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) > !0:
              revert with 0, 17
          return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime))
  if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
      if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
          revert with 0, 17
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          revert with 0, 17
      if 0 > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          revert with 0, 17
      return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048
  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
      revert with 0, 'SafeMath: subtraction overflow'
  if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
      revert with 0, 17
  if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
      if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
          revert with 0, 17
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          revert with 0, 17
      if 0 > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          revert with 0, 17
      return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048
  if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if 0 / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 17
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              revert with 0, 17
          else:
              return 0
      if 0 / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0 / lockTime:
          revert with 0, 17
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          revert with 0, 17
      if 0 > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime)):
          revert with 0, 17
      return (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime))
  if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
      revert with 0, 17
  if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
      revert with 0, 18
  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
  if lockTime <= 0:
      revert with 0, 'SafeMath: division by zero'
  if not lockTime:
      revert with 0, 18
  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          revert with 0, 17
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          revert with 0, 17
      else:
          return 0
  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
      revert with 0, 'SafeMath: subtraction overflow'
  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime:
      revert with 0, 17
  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
      revert with 0, 'SafeMath: subtraction overflow'
  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
      revert with 0, 17
  if 0 > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime)):
      revert with 0, 17
  return (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime))

def unknown51b3a508(uint256 _param1): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _param1 == uint8(_param1)
  if tx.origin != caller:
      revert with 0, 'not user'
  if not unknown36d461a3[caller][1][_param1 << 248].field_768:
      if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
          log 0xbc17dcbe: caller, 0, block.timestamp
          return 0
      if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
          revert with 0, 'SafeMath: subtraction overflow'
      if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
          revert with 0, 17
      if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
          log 0xbc17dcbe: caller, 0, block.timestamp
          return 0
      if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
              if 0 / lockTime:
                  require ext_code.size(tokenAddr)
                  call tokenAddr.transfer(address to, uint256 tokens) with:
                       gas gas_remaining wei
                      args caller, 0 / lockTime
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=ΓÇ▓ 32
                  require ext_call.return_data == bool(ext_call.return_data[0])
                  if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                      revert with 0, 17
                  unknowncf6744af[caller][3][_param1 << 248].field_2048 -= 0 / lockTime
                  if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - (0 / lockTime):
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                  else:
                      unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
              if 0 > !(0 / lockTime):
                  revert with 0, 17
              if 0 / lockTime < 0:
                  revert with 0, 'SafeMath: addition overflow'
              log 0xbc17dcbe: caller, 0 / lockTime, block.timestamp
              if 0 > !(0 / lockTime):
                  revert with 0, 17
              if 0 / lockTime < 0:
                  revert with 0, 'SafeMath: addition overflow'
              return (0 / lockTime)
      else:
          if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
              revert with 0, 17
          if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
              revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
              if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                  require ext_code.size(tokenAddr)
                  call tokenAddr.transfer(address to, uint256 tokens) with:
                       gas gas_remaining wei
                      args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=ΓÇ▓ 32
                  require ext_call.return_data == bool(ext_call.return_data[0])
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                      revert with 0, 17
                  unknowncf6744af[caller][3][_param1 << 248].field_2048 -= (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                  if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                  else:
                      unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
              if 0 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                  revert with 0, 17
              if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime < 0:
                  revert with 0, 'SafeMath: addition overflow'
              log 0xbc17dcbe: caller, (block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime, block.timestamp
              if 0 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                  revert with 0, 17
              if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime < 0:
                  revert with 0, 'SafeMath: addition overflow'
              return ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime)
      if unknowncf6744af[caller][3][_param1 << 248].field_2048:
          require ext_code.size(tokenAddr)
          call tokenAddr.transfer(address to, uint256 tokens) with:
               gas gas_remaining wei
              args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >=ΓÇ▓ 32
          require ext_call.return_data == bool(ext_call.return_data[0])
          if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
              revert with 0, 17
          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
          else:
              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
      if 0 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
          revert with 0, 17
      if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0:
          revert with 0, 'SafeMath: addition overflow'
      log 0xbc17dcbe: caller, unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
      if 0 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
          revert with 0, 17
      if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0:
          revert with 0, 'SafeMath: addition overflow'
      return unknowncf6744af[caller][3][_param1 << 248].field_2048
  if unknown36d461a3[caller][1][_param1 << 248].field_256 > block.timestamp:
      revert with 0, 'SafeMath: subtraction overflow'
  if block.timestamp < unknown36d461a3[caller][1][_param1 << 248].field_256:
      revert with 0, 17
  if block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256 < 1:
      if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
          log 0xbc17dcbe: caller, 0, block.timestamp
          return 0
      if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
          revert with 0, 'SafeMath: subtraction overflow'
      if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
          revert with 0, 17
      if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
          log 0xbc17dcbe: caller, 0, block.timestamp
          return 0
      if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
              if 0 / lockTime:
                  require ext_code.size(tokenAddr)
                  call tokenAddr.transfer(address to, uint256 tokens) with:
                       gas gas_remaining wei
                      args caller, 0 / lockTime
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=ΓÇ▓ 32
                  require ext_call.return_data == bool(ext_call.return_data[0])
                  if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                      revert with 0, 17
                  unknowncf6744af[caller][3][_param1 << 248].field_2048 -= 0 / lockTime
                  if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - (0 / lockTime):
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                  else:
                      unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
              if 0 > !(0 / lockTime):
                  revert with 0, 17
              if 0 / lockTime < 0:
                  revert with 0, 'SafeMath: addition overflow'
              log 0xbc17dcbe: caller, 0 / lockTime, block.timestamp
              if 0 > !(0 / lockTime):
                  revert with 0, 17
              if 0 / lockTime < 0:
                  revert with 0, 'SafeMath: addition overflow'
              return (0 / lockTime)
      else:
          if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
              revert with 0, 17
          if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
              revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
              if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                  require ext_code.size(tokenAddr)
                  call tokenAddr.transfer(address to, uint256 tokens) with:
                       gas gas_remaining wei
                      args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=ΓÇ▓ 32
                  require ext_call.return_data == bool(ext_call.return_data[0])
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                      revert with 0, 17
                  unknowncf6744af[caller][3][_param1 << 248].field_2048 -= (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                  if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                  else:
                      unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
              if 0 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                  revert with 0, 17
              if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime < 0:
                  revert with 0, 'SafeMath: addition overflow'
              log 0xbc17dcbe: caller, (block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime, block.timestamp
              if 0 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                  revert with 0, 17
              if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime < 0:
                  revert with 0, 'SafeMath: addition overflow'
              return ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime)
      if unknowncf6744af[caller][3][_param1 << 248].field_2048:
          require ext_code.size(tokenAddr)
          call tokenAddr.transfer(address to, uint256 tokens) with:
               gas gas_remaining wei
              args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >=ΓÇ▓ 32
          require ext_call.return_data == bool(ext_call.return_data[0])
          if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
              revert with 0, 17
          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
          else:
              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
      if 0 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
          revert with 0, 17
      if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0:
          revert with 0, 'SafeMath: addition overflow'
      log 0xbc17dcbe: caller, unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
      if 0 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
          revert with 0, 17
      if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0:
          revert with 0, 'SafeMath: addition overflow'
      return unknowncf6744af[caller][3][_param1 << 248].field_2048
  if not block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256:
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if 0 / lockTime <= unknown36d461a3[caller][1][_param1 << 248].field_768:
          if not 0 / lockTime:
              if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  if 0 / lockTime > -1:
                      revert with 0, 17
                  if 0 / lockTime < 0 / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  log 0xbc17dcbe: caller, 0 / lockTime, block.timestamp
                  if 0 / lockTime > -1:
                      revert with 0, 17
                  if 0 / lockTime < 0 / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  return (0 / lockTime)
              if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
                  revert with 0, 'SafeMath: subtraction overflow'
              if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
                  revert with 0, 17
              if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
                  if 0 / lockTime > -1:
                      revert with 0, 17
                  if 0 / lockTime < 0 / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  log 0xbc17dcbe: caller, 0 / lockTime, block.timestamp
                  if 0 / lockTime > -1:
                      revert with 0, 17
                  if 0 / lockTime < 0 / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  return (0 / lockTime)
              if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      if 0 / lockTime:
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, 0 / lockTime
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= 0 / lockTime
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - (0 / lockTime):
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                      if 0 / lockTime > !(0 / lockTime):
                          revert with 0, 17
                      if 2 * 0 / lockTime < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, 2 * 0 / lockTime, block.timestamp
                      if 0 / lockTime > !(0 / lockTime):
                          revert with 0, 17
                      if 2 * 0 / lockTime < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return (2 * 0 / lockTime)
              else:
                  if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 17
                  if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
                      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                      if 0 / lockTime > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                          revert with 0, 17
                      if (0 / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, (0 / lockTime) + ((block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime), block.timestamp
                      if 0 / lockTime > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                          revert with 0, 17
                      if (0 / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return ((0 / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime))
          else:
              require ext_code.size(tokenAddr)
              call tokenAddr.transfer(address to, uint256 tokens) with:
                   gas gas_remaining wei
                  args caller, 0 / lockTime
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              require ext_call.return_data == bool(ext_call.return_data[0])
              if 0 / lockTime > unknown36d461a3[caller][1][_param1 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[caller][1][_param1 << 248].field_768 < 0 / lockTime:
                  revert with 0, 17
              unknown36d461a3[caller][1][_param1 << 248].field_768 -= 0 / lockTime
              if 100000 < unknown36d461a3[caller][1][_param1 << 248].field_768 - (0 / lockTime):
                  unknown36d461a3[caller][1][_param1 << 248].field_256 = block.timestamp
              else:
                  unknown36d461a3[caller][1][_param1 << 248].field_512 = 0
                  unknown36d461a3[caller][1][_param1 << 248].field_768 = 0
                  unknown36d461a3[caller][1][_param1 << 248].field_256 = 0
              if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  if 0 / lockTime > -1:
                      revert with 0, 17
                  if 0 / lockTime < 0 / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  log 0xbc17dcbe: caller, 0 / lockTime, block.timestamp
                  if 0 / lockTime > -1:
                      revert with 0, 17
                  if 0 / lockTime < 0 / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  return (0 / lockTime)
              if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
                  revert with 0, 'SafeMath: subtraction overflow'
              if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
                  revert with 0, 17
              if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
                  if 0 / lockTime > -1:
                      revert with 0, 17
                  if 0 / lockTime < 0 / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  log 0xbc17dcbe: caller, 0 / lockTime, block.timestamp
                  if 0 / lockTime > -1:
                      revert with 0, 17
                  if 0 / lockTime < 0 / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  return (0 / lockTime)
              if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      if 0 / lockTime:
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, 0 / lockTime
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= 0 / lockTime
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - (0 / lockTime):
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                      if 0 / lockTime > !(0 / lockTime):
                          revert with 0, 17
                      if 2 * 0 / lockTime < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, 2 * 0 / lockTime, block.timestamp
                      if 0 / lockTime > !(0 / lockTime):
                          revert with 0, 17
                      if 2 * 0 / lockTime < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return (2 * 0 / lockTime)
              else:
                  if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 17
                  if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
                      revert with 0, 'SafeMath: multiplication overflow'
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                      if 0 / lockTime > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                          revert with 0, 17
                      if (0 / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, (0 / lockTime) + ((block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime), block.timestamp
                      if 0 / lockTime > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                          revert with 0, 17
                      if (0 / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return ((0 / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime))
          if unknowncf6744af[caller][3][_param1 << 248].field_2048:
              require ext_code.size(tokenAddr)
              call tokenAddr.transfer(address to, uint256 tokens) with:
                   gas gas_remaining wei
                  args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              require ext_call.return_data == bool(ext_call.return_data[0])
              if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  revert with 0, 17
              unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
              if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
              else:
                  unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                  unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                  unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
          if 0 / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
              revert with 0, 17
          if (0 / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
              revert with 0, 'SafeMath: addition overflow'
          log 0xbc17dcbe: caller, (0 / lockTime) + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
          if 0 / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
              revert with 0, 17
          if (0 / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
              revert with 0, 'SafeMath: addition overflow'
          return ((0 / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048)
  else:
      if block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256 and unknown36d461a3[caller][1][_param1 << 248].field_512 > -1 / block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256:
          revert with 0, 17
      if not block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256:
          revert with 0, 18
      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256 != unknown36d461a3[caller][1][_param1 << 248].field_512:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
      if lockTime <= 0:
          revert with 0, 'SafeMath: division by zero'
      if not lockTime:
          revert with 0, 18
      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime <= unknown36d461a3[caller][1][_param1 << 248].field_768:
          if not (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
              if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > -1:
                      revert with 0, 17
                  if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  log 0xbc17dcbe: caller, (block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime, block.timestamp
                  if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > -1:
                      revert with 0, 17
                  if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  return ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime)
              if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
                  revert with 0, 'SafeMath: subtraction overflow'
              if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
                  revert with 0, 17
              if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
                  if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > -1:
                      revert with 0, 17
                  if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  log 0xbc17dcbe: caller, (block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime, block.timestamp
                  if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > -1:
                      revert with 0, 17
                  if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  return ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime)
              if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      if 0 / lockTime:
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, 0 / lockTime
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= 0 / lockTime
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - (0 / lockTime):
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !(0 / lockTime):
                          revert with 0, 17
                      if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + (0 / lockTime) < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, ((block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime) + (0 / lockTime), block.timestamp
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !(0 / lockTime):
                          revert with 0, 17
                      if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + (0 / lockTime) < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return (((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + (0 / lockTime))
              else:
                  if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 17
                  if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
                      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                          revert with 0, 17
                      if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, ((block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime) + ((block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime), block.timestamp
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                          revert with 0, 17
                      if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return (((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime))
          else:
              require ext_code.size(tokenAddr)
              call tokenAddr.transfer(address to, uint256 tokens) with:
                   gas gas_remaining wei
                  args caller, (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              require ext_call.return_data == bool(ext_call.return_data[0])
              if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > unknown36d461a3[caller][1][_param1 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[caller][1][_param1 << 248].field_768 < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                  revert with 0, 17
              unknown36d461a3[caller][1][_param1 << 248].field_768 -= (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime
              if 100000 < unknown36d461a3[caller][1][_param1 << 248].field_768 - ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime):
                  unknown36d461a3[caller][1][_param1 << 248].field_256 = block.timestamp
              else:
                  unknown36d461a3[caller][1][_param1 << 248].field_512 = 0
                  unknown36d461a3[caller][1][_param1 << 248].field_768 = 0
                  unknown36d461a3[caller][1][_param1 << 248].field_256 = 0
              if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > -1:
                      revert with 0, 17
                  if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  log 0xbc17dcbe: caller, (block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime, block.timestamp
                  if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > -1:
                      revert with 0, 17
                  if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  return ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime)
              if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
                  revert with 0, 'SafeMath: subtraction overflow'
              if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
                  revert with 0, 17
              if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
                  if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > -1:
                      revert with 0, 17
                  if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  log 0xbc17dcbe: caller, (block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime, block.timestamp
                  if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > -1:
                      revert with 0, 17
                  if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  return ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime)
              if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      if 0 / lockTime:
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, 0 / lockTime
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= 0 / lockTime
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - (0 / lockTime):
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !(0 / lockTime):
                          revert with 0, 17
                      if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + (0 / lockTime) < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, ((block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime) + (0 / lockTime), block.timestamp
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !(0 / lockTime):
                          revert with 0, 17
                      if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + (0 / lockTime) < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return (((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + (0 / lockTime))
              else:
                  if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 17
                  if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
                      revert with 0, 'SafeMath: multiplication overflow'
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                          revert with 0, 17
                      if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, ((block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime) + ((block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime), block.timestamp
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                          revert with 0, 17
                      if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return (((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime))
          if unknowncf6744af[caller][3][_param1 << 248].field_2048:
              require ext_code.size(tokenAddr)
              call tokenAddr.transfer(address to, uint256 tokens) with:
                   gas gas_remaining wei
                  args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              require ext_call.return_data == bool(ext_call.return_data[0])
              if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  revert with 0, 17
              unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
              if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
              else:
                  unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                  unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                  unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
          if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
              revert with 0, 17
          if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
              revert with 0, 'SafeMath: addition overflow'
          log 0xbc17dcbe: caller, ((block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime) + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
          if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
              revert with 0, 17
          if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
              revert with 0, 'SafeMath: addition overflow'
          return (((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048)
  if not unknown36d461a3[caller][1][_param1 << 248].field_768:
      if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
          if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
              revert with 0, 17
          if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
              revert with 0, 'SafeMath: addition overflow'
          log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768, block.timestamp
          if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
              revert with 0, 17
          if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
              revert with 0, 'SafeMath: addition overflow'
          return unknown36d461a3[caller][1][_param1 << 248].field_768
      if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
          revert with 0, 'SafeMath: subtraction overflow'
      if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
          revert with 0, 17
      if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
          if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
              revert with 0, 17
          if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
              revert with 0, 'SafeMath: addition overflow'
          log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768, block.timestamp
          if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
              revert with 0, 17
          if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
              revert with 0, 'SafeMath: addition overflow'
          return unknown36d461a3[caller][1][_param1 << 248].field_768
      if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
              if 0 / lockTime:
                  require ext_code.size(tokenAddr)
                  call tokenAddr.transfer(address to, uint256 tokens) with:
                       gas gas_remaining wei
                      args caller, 0 / lockTime
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=ΓÇ▓ 32
                  require ext_call.return_data == bool(ext_call.return_data[0])
                  if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                      revert with 0, 17
                  unknowncf6744af[caller][3][_param1 << 248].field_2048 -= 0 / lockTime
                  if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - (0 / lockTime):
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                  else:
                      unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !(0 / lockTime):
                  revert with 0, 17
              if unknown36d461a3[caller][1][_param1 << 248].field_768 + (0 / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + (0 / lockTime), block.timestamp
              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !(0 / lockTime):
                  revert with 0, 17
              if unknown36d461a3[caller][1][_param1 << 248].field_768 + (0 / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              return (unknown36d461a3[caller][1][_param1 << 248].field_768 + (0 / lockTime))
      else:
          if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
              revert with 0, 17
          if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
              revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
              if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                  require ext_code.size(tokenAddr)
                  call tokenAddr.transfer(address to, uint256 tokens) with:
                       gas gas_remaining wei
                      args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=ΓÇ▓ 32
                  require ext_call.return_data == bool(ext_call.return_data[0])
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                      revert with 0, 17
                  unknowncf6744af[caller][3][_param1 << 248].field_2048 -= (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                  if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                  else:
                      unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                  revert with 0, 17
              if unknown36d461a3[caller][1][_param1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime), block.timestamp
              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                  revert with 0, 17
              if unknown36d461a3[caller][1][_param1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              return (unknown36d461a3[caller][1][_param1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime))
  else:
      require ext_code.size(tokenAddr)
      call tokenAddr.transfer(address to, uint256 tokens) with:
           gas gas_remaining wei
          args caller, unknown36d461a3[caller][1][_param1 << 248].field_768
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >=ΓÇ▓ 32
      require ext_call.return_data == bool(ext_call.return_data[0])
      if unknown36d461a3[caller][1][_param1 << 248].field_768 > unknown36d461a3[caller][1][_param1 << 248].field_768:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
          revert with 0, 17
      unknown36d461a3[caller][1][_param1 << 248].field_768 -= unknown36d461a3[caller][1][_param1 << 248].field_768
      if 100000 < unknown36d461a3[caller][1][_param1 << 248].field_768 - unknown36d461a3[caller][1][_param1 << 248].field_768:
          unknown36d461a3[caller][1][_param1 << 248].field_256 = block.timestamp
      else:
          unknown36d461a3[caller][1][_param1 << 248].field_512 = 0
          unknown36d461a3[caller][1][_param1 << 248].field_768 = 0
          unknown36d461a3[caller][1][_param1 << 248].field_256 = 0
      if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
          if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
              revert with 0, 17
          if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
              revert with 0, 'SafeMath: addition overflow'
          log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768, block.timestamp
          if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
              revert with 0, 17
          if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
              revert with 0, 'SafeMath: addition overflow'
          return unknown36d461a3[caller][1][_param1 << 248].field_768
      if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
          revert with 0, 'SafeMath: subtraction overflow'
      if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
          revert with 0, 17
      if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
          if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
              revert with 0, 17
          if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
              revert with 0, 'SafeMath: addition overflow'
          log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768, block.timestamp
          if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
              revert with 0, 17
          if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
              revert with 0, 'SafeMath: addition overflow'
          return unknown36d461a3[caller][1][_param1 << 248].field_768
      if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
              if 0 / lockTime:
                  require ext_code.size(tokenAddr)
                  call tokenAddr.transfer(address to, uint256 tokens) with:
                       gas gas_remaining wei
                      args caller, 0 / lockTime
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=ΓÇ▓ 32
                  require ext_call.return_data == bool(ext_call.return_data[0])
                  if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                      revert with 0, 17
                  unknowncf6744af[caller][3][_param1 << 248].field_2048 -= 0 / lockTime
                  if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - (0 / lockTime):
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                  else:
                      unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !(0 / lockTime):
                  revert with 0, 17
              if unknown36d461a3[caller][1][_param1 << 248].field_768 + (0 / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + (0 / lockTime), block.timestamp
              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !(0 / lockTime):
                  revert with 0, 17
              if unknown36d461a3[caller][1][_param1 << 248].field_768 + (0 / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              return (unknown36d461a3[caller][1][_param1 << 248].field_768 + (0 / lockTime))
      else:
          if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
              revert with 0, 17
          if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
              revert with 0, 'SafeMath: multiplication overflow'
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
              if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                  require ext_code.size(tokenAddr)
                  call tokenAddr.transfer(address to, uint256 tokens) with:
                       gas gas_remaining wei
                      args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=ΓÇ▓ 32
                  require ext_call.return_data == bool(ext_call.return_data[0])
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                      revert with 0, 17
                  unknowncf6744af[caller][3][_param1 << 248].field_2048 -= (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                  if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                  else:
                      unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                  revert with 0, 17
              if unknown36d461a3[caller][1][_param1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime), block.timestamp
              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                  revert with 0, 17
              if unknown36d461a3[caller][1][_param1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              return (unknown36d461a3[caller][1][_param1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime))
  if unknowncf6744af[caller][3][_param1 << 248].field_2048:
      require ext_code.size(tokenAddr)
      call tokenAddr.transfer(address to, uint256 tokens) with:
           gas gas_remaining wei
          args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >=ΓÇ▓ 32
      require ext_call.return_data == bool(ext_call.return_data[0])
      if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
          revert with 0, 'SafeMath: subtraction overflow'
      if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
          revert with 0, 17
      unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
      if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
          unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
      else:
          unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
          unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
          unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
  if unknown36d461a3[caller][1][_param1 << 248].field_768 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
      revert with 0, 17
  if unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknown36d461a3[caller][1][_param1 << 248].field_768:
      revert with 0, 'SafeMath: addition overflow'
  log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
  if unknown36d461a3[caller][1][_param1 << 248].field_768 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
      revert with 0, 17
  if unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknown36d461a3[caller][1][_param1 << 248].field_768:
      revert with 0, 'SafeMath: addition overflow'
  return (unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048)

def unknown60487c0b(uint256 _param1, uint256 _param2, uint256 _param3) payable: 
  require calldata.size - 4 >=ΓÇ▓ 96
  require _param1 == addr(_param1)
  require _param2 == addr(_param2)
  require _param3 == uint8(_param3)
  if stor2 == 2:
      revert with 0, 'ReentrancyGuard: reentrant call'
  stor2 = 2
  if not open:
      revert with 0, 'no open'
  if caller != tx.origin:
      revert with 0, 'not allowed'
  require ext_code.size(priceAddress)
  static call priceAddress.0xe9de5ee9 with:
          gas gas_remaining wei
         args 0, uint32(stor25), call.value, unknown1554e1ceAddress, fee
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=ΓÇ▓ 32
  if ext_call.return_data < unknown5e745bde:
      revert with 0, 'Wrong amount'
  if ext_call.return_data > unknown89d4cce8:
      revert with 0, 'Wrong amount'
  if ext_call.return_data > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
      revert with 0, 17
  if 10^12 * ext_call.return_data and unknown1950833a > -1 / 10^12 * ext_call.return_data[0]:
      revert with 0, 17
  if not changeAmount:
      revert with 0, 18
  if unknowne0dabadd > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
      revert with 0, 17
  if unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowne0dabadd:
      revert with 0, 'SafeMath: addition overflow'
  if unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) > unknownbf383450:
      revert with 0, 'Tokens with deficiencies'
  if unknowncf6744af[caller].field_256:
      if unknowncf6744af[caller][3][_param3 << 248].field_0 > !(10^12 * ext_call.return_data[0]):
          revert with 0, 17
      if unknowncf6744af[caller][3][_param3 << 248].field_0 + (10^12 * ext_call.return_data < unknowncf6744af[caller][3][_param3 << 248].field_0:
          revert with 0, 'SafeMath: addition overflow'
      unknowncf6744af[caller][3][_param3 << 248].field_0 += 10^12 * ext_call.return_data[0]
      if unknowncf6744af[caller][3][_param3 << 248].field_256 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
          revert with 0, 17
      if unknowncf6744af[caller][3][_param3 << 248].field_256 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowncf6744af[caller][3][_param3 << 248].field_256:
          revert with 0, 'SafeMath: addition overflow'
      unknowncf6744af[caller][3][_param3 << 248].field_256 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
      if unknowncf6744af[caller][3][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
          revert with 0, 17
      if unknowncf6744af[caller][3][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowncf6744af[caller][3][_param3 << 248].field_768:
          revert with 0, 'SafeMath: addition overflow'
      unknowncf6744af[caller][3][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
      if unknowncf6744af[caller][3][_param3 << 248].field_1024 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
          revert with 0, 17
      if unknowncf6744af[caller][3][_param3 << 248].field_1024 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowncf6744af[caller][3][_param3 << 248].field_1024:
          revert with 0, 'SafeMath: addition overflow'
      unknowncf6744af[caller][3][_param3 << 248].field_1024 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
      if not unknowncf6744af[caller][3][_param3 << 248].field_512:
          unknowncf6744af[caller][3][_param3 << 248].field_512 = block.timestamp
      if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
          if unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1280 > -1:
              revert with 0, 17
          if unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1280 < unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1280:
              revert with 0, 'SafeMath: addition overflow'
          if unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1792 > -1:
              revert with 0, 17
          if unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1792 < unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1792:
              revert with 0, 'SafeMath: addition overflow'
          if unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_2048 > -1:
              revert with 0, 17
          if unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_2048 < unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_2048:
              revert with 0, 'SafeMath: addition overflow'
          if not unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1536:
              unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1536 = block.timestamp
          if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_0 > -1:
                  revert with 0, 17
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_0 < unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_0:
                  revert with 0, 'SafeMath: addition overflow'
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_512 > -1:
                  revert with 0, 17
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_512 < unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_512:
                  revert with 0, 'SafeMath: addition overflow'
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_768 > -1:
                  revert with 0, 17
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_768 < unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              if not unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_256:
                  unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_256 = block.timestamp
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > -1:
                  revert with 0, 17
              if unknowne0dabadd > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
                  revert with 0, 17
              unknowne0dabadd += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
          else:
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown0ea30489 > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  revert with 0, 17
              if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  revert with 0, 18
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown0ea30489:
                  revert with 0, 'SafeMath: multiplication overflow'
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_0 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_0 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_0:
                  revert with 0, 'SafeMath: addition overflow'
              unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_0 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_512 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_512 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_512:
                  revert with 0, 'SafeMath: addition overflow'
              unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_512 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
              if not unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_256:
                  unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_256 = block.timestamp
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > -1:
                  revert with 0, 17
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
                  revert with 0, 17
              unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
      else:
          if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown77bbaf8b > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
              revert with 0, 17
          if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
              revert with 0, 18
          if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown77bbaf8b:
              revert with 0, 'SafeMath: multiplication overflow'
          if unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1280 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
              revert with 0, 17
          if unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1280 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) < unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1280:
              revert with 0, 'SafeMath: addition overflow'
          unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1280 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100
          if unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1792 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
              revert with 0, 17
          if unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1792 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) < unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1792:
              revert with 0, 'SafeMath: addition overflow'
          unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1792 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100
          if unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_2048 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
              revert with 0, 17
          if unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_2048 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) < unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_2048:
              revert with 0, 'SafeMath: addition overflow'
          unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_2048 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100
          if not unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1536:
              unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1536 = block.timestamp
          if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_0 > -1:
                  revert with 0, 17
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_0 < unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_0:
                  revert with 0, 'SafeMath: addition overflow'
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_512 > -1:
                  revert with 0, 17
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_512 < unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_512:
                  revert with 0, 'SafeMath: addition overflow'
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_768 > -1:
                  revert with 0, 17
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_768 < unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              if not unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_256:
                  unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_256 = block.timestamp
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                  revert with 0, 17
              if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > -1:
                  revert with 0, 17
              if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)):
                  revert with 0, 17
              unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)
          else:
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown0ea30489 > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  revert with 0, 17
              if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  revert with 0, 18
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown0ea30489:
                  revert with 0, 'SafeMath: multiplication overflow'
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_0 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_0 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_0:
                  revert with 0, 'SafeMath: addition overflow'
              unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_0 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_512 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_512 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_512:
                  revert with 0, 'SafeMath: addition overflow'
              unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_512 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
              if not unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_256:
                  unknown36d461a3[stor27[stor27[caller].field_256].field_0][1][_param3 << 248].field_256 = block.timestamp
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                  revert with 0, 17
              if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
                  revert with 0, 17
              unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
      if call.value and unknown1deaf5cd > -1 / call.value:
          revert with 0, 17
      call unknown40d72236Address with:
         value call.value * unknown1deaf5cd / 1000 wei
           gas 2300 * is_zero(value) wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      if call.value and unknownf3a6c04f > -1 / call.value:
          revert with 0, 17
      call unknown3ea3c409Address with:
         value call.value * unknownf3a6c04f / 1000 wei
           gas 2300 * is_zero(value) wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      if call.value and unknown140f3bd8 > -1 / call.value:
          revert with 0, 17
      call unknownb44a4308Address with:
         value call.value * unknown140f3bd8 / 1000 wei
           gas 2300 * is_zero(value) wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      if call.value and unknown1cacf693 > -1 / call.value:
          revert with 0, 17
      call unknowncb9b66a7Address with:
         value call.value * unknown1cacf693 / 1000 wei
           gas 2300 * is_zero(value) wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      if call.value and unknown35c46a63 > -1 / call.value:
          revert with 0, 17
      call unknownbe7cadfaAddress with:
         value call.value * unknown35c46a63 / 1000 wei
           gas 2300 * is_zero(value) wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      log 0xefd8abd5: caller, unknowncf6744af[caller].field_256, unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
      stor2 = 1
      return 1
  if not addr(_param1):
      revert with 0, 'Referees must'
  if unknowncf6744af[addr(_param1)].field_256:
      unknowncf6744af[caller].field_0 = unknowncf6744af[addr(_param1)].field_0
      unknowncf6744af[caller].field_256 = addr(_param1)
      if unknowncf6744af[addr(_param1)].field_512 == -1:
          revert with 0, 17
      unknowncf6744af[addr(_param1)].field_512++
      if unknowncf6744af[caller][3][_param3 << 248].field_0 > !(10^12 * ext_call.return_data[0]):
          revert with 0, 17
      if unknowncf6744af[caller][3][_param3 << 248].field_0 + (10^12 * ext_call.return_data < unknowncf6744af[caller][3][_param3 << 248].field_0:
          revert with 0, 'SafeMath: addition overflow'
      unknowncf6744af[caller][3][_param3 << 248].field_0 += 10^12 * ext_call.return_data[0]
      if unknowncf6744af[caller][3][_param3 << 248].field_256 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
          revert with 0, 17
      if unknowncf6744af[caller][3][_param3 << 248].field_256 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowncf6744af[caller][3][_param3 << 248].field_256:
          revert with 0, 'SafeMath: addition overflow'
      unknowncf6744af[caller][3][_param3 << 248].field_256 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
      if unknowncf6744af[caller][3][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
          revert with 0, 17
      if unknowncf6744af[caller][3][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowncf6744af[caller][3][_param3 << 248].field_768:
          revert with 0, 'SafeMath: addition overflow'
      unknowncf6744af[caller][3][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
      if unknowncf6744af[caller][3][_param3 << 248].field_1024 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
          revert with 0, 17
      if unknowncf6744af[caller][3][_param3 << 248].field_1024 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowncf6744af[caller][3][_param3 << 248].field_1024:
          revert with 0, 'SafeMath: addition overflow'
      unknowncf6744af[caller][3][_param3 << 248].field_1024 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
      if unknowncf6744af[caller][3][_param3 << 248].field_512:
          if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 > -1:
                  revert with 0, 17
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280:
                  revert with 0, 'SafeMath: addition overflow'
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 > -1:
                  revert with 0, 17
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792:
                  revert with 0, 'SafeMath: addition overflow'
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 > -1:
                  revert with 0, 17
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048:
                  revert with 0, 'SafeMath: addition overflow'
              if not unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1536:
                  unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1536 = block.timestamp
              if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > -1:
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                      revert with 0, 'SafeMath: addition overflow'
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > -1:
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                      revert with 0, 'SafeMath: addition overflow'
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > -1:
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                      revert with 0, 'SafeMath: addition overflow'
                  if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > -1:
                      revert with 0, 17
                  if unknowne0dabadd > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
                      revert with 0, 17
                  unknowne0dabadd += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
              else:
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown0ea30489 > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      revert with 0, 17
                  if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      revert with 0, 18
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown0ea30489:
                      revert with 0, 'SafeMath: multiplication overflow'
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                      revert with 0, 'SafeMath: addition overflow'
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                      revert with 0, 'SafeMath: addition overflow'
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                      revert with 0, 'SafeMath: addition overflow'
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                  if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > -1:
                      revert with 0, 17
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
                      revert with 0, 17
                  unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
              if call.value and unknown1deaf5cd > -1 / call.value:
                  revert with 0, 17
              call unknown40d72236Address with:
                 value call.value * unknown1deaf5cd / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              if call.value and unknownf3a6c04f > -1 / call.value:
                  revert with 0, 17
              call unknown3ea3c409Address with:
                 value call.value * unknownf3a6c04f / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              if call.value and unknown140f3bd8 > -1 / call.value:
                  revert with 0, 17
              call unknownb44a4308Address with:
                 value call.value * unknown140f3bd8 / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              if call.value and unknown1cacf693 > -1 / call.value:
                  revert with 0, 17
              call unknowncb9b66a7Address with:
                 value call.value * unknown1cacf693 / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              if call.value and unknown35c46a63 > -1 / call.value:
                  revert with 0, 17
              call unknownbe7cadfaAddress with:
                 value call.value * unknown35c46a63 / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
              stor2 = 1
              return 1
          if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown77bbaf8b > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
              revert with 0, 17
          if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
              revert with 0, 18
          if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown77bbaf8b:
              revert with 0, 'SafeMath: multiplication overflow'
          if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
              revert with 0, 17
          if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280:
              revert with 0, 'SafeMath: addition overflow'
          unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100
          if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
              revert with 0, 17
          if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792:
              revert with 0, 'SafeMath: addition overflow'
          unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100
          if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
              revert with 0, 17
          if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048:
              revert with 0, 'SafeMath: addition overflow'
          unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100
          if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1536:
              if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > -1:
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                      revert with 0, 'SafeMath: addition overflow'
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > -1:
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                      revert with 0, 'SafeMath: addition overflow'
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > -1:
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                      revert with 0, 'SafeMath: addition overflow'
                  if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                      revert with 0, 17
                  if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > -1:
                      revert with 0, 17
                  if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)):
                      revert with 0, 17
                  unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)
                  if call.value and unknown1deaf5cd > -1 / call.value:
                      revert with 0, 17
                  call unknown40d72236Address with:
                     value call.value * unknown1deaf5cd / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknownf3a6c04f > -1 / call.value:
                      revert with 0, 17
                  call unknown3ea3c409Address with:
                     value call.value * unknownf3a6c04f / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown140f3bd8 > -1 / call.value:
                      revert with 0, 17
                  call unknownb44a4308Address with:
                     value call.value * unknown140f3bd8 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown1cacf693 > -1 / call.value:
                      revert with 0, 17
                  call unknowncb9b66a7Address with:
                     value call.value * unknown1cacf693 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown35c46a63 > -1 / call.value:
                      revert with 0, 17
                  call unknownbe7cadfaAddress with:
                     value call.value * unknown35c46a63 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
                  stor2 = 1
                  return 1
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown0ea30489 > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  revert with 0, 17
              if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  revert with 0, 18
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown0ea30489:
                  revert with 0, 'SafeMath: multiplication overflow'
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                  revert with 0, 'SafeMath: addition overflow'
              unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                  revert with 0, 'SafeMath: addition overflow'
              unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                      revert with 0, 17
                  if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
                      revert with 0, 17
                  unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
                  if call.value and unknown1deaf5cd > -1 / call.value:
                      revert with 0, 17
                  call unknown40d72236Address with:
                     value call.value * unknown1deaf5cd / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknownf3a6c04f > -1 / call.value:
                      revert with 0, 17
                  call unknown3ea3c409Address with:
                     value call.value * unknownf3a6c04f / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown140f3bd8 > -1 / call.value:
                      revert with 0, 17
                  call unknownb44a4308Address with:
                     value call.value * unknown140f3bd8 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown1cacf693 > -1 / call.value:
                      revert with 0, 17
                  call unknowncb9b66a7Address with:
                     value call.value * unknown1cacf693 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown35c46a63 > -1 / call.value:
                      revert with 0, 17
                  call unknownbe7cadfaAddress with:
                     value call.value * unknown35c46a63 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
                  stor2 = 1
                  return 1
              unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
          else:
              unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1536 = block.timestamp
              if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > -1:
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                      revert with 0, 'SafeMath: addition overflow'
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > -1:
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                      revert with 0, 'SafeMath: addition overflow'
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > -1:
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                      revert with 0, 'SafeMath: addition overflow'
                  if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                      revert with 0, 17
                  if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > -1:
                      revert with 0, 17
                  if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)):
                      revert with 0, 17
                  unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)
                  if call.value and unknown1deaf5cd > -1 / call.value:
                      revert with 0, 17
                  call unknown40d72236Address with:
                     value call.value * unknown1deaf5cd / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknownf3a6c04f > -1 / call.value:
                      revert with 0, 17
                  call unknown3ea3c409Address with:
                     value call.value * unknownf3a6c04f / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown140f3bd8 > -1 / call.value:
                      revert with 0, 17
                  call unknownb44a4308Address with:
                     value call.value * unknown140f3bd8 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown1cacf693 > -1 / call.value:
                      revert with 0, 17
                  call unknowncb9b66a7Address with:
                     value call.value * unknown1cacf693 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown35c46a63 > -1 / call.value:
                      revert with 0, 17
                  call unknownbe7cadfaAddress with:
                     value call.value * unknown35c46a63 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
                  stor2 = 1
                  return 1
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown0ea30489 > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  revert with 0, 17
              if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  revert with 0, 18
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown0ea30489:
                  revert with 0, 'SafeMath: multiplication overflow'
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                  revert with 0, 'SafeMath: addition overflow'
              unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                  revert with 0, 'SafeMath: addition overflow'
              unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
              if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
          if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
              revert with 0, 17
          if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
              revert with 0, 17
          if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
              revert with 0, 17
          unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
          if call.value and unknown1deaf5cd > -1 / call.value:
              revert with 0, 17
          call unknown40d72236Address with:
             value call.value * unknown1deaf5cd / 1000 wei
               gas 2300 * is_zero(value) wei
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          if call.value and unknownf3a6c04f > -1 / call.value:
              revert with 0, 17
          call unknown3ea3c409Address with:
             value call.value * unknownf3a6c04f / 1000 wei
               gas 2300 * is_zero(value) wei
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          if call.value and unknown140f3bd8 > -1 / call.value:
              revert with 0, 17
          call unknownb44a4308Address with:
             value call.value * unknown140f3bd8 / 1000 wei
               gas 2300 * is_zero(value) wei
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          if call.value and unknown1cacf693 > -1 / call.value:
              revert with 0, 17
          call unknowncb9b66a7Address with:
             value call.value * unknown1cacf693 / 1000 wei
               gas 2300 * is_zero(value) wei
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          if call.value and unknown35c46a63 > -1 / call.value:
              revert with 0, 17
          call unknownbe7cadfaAddress with:
             value call.value * unknown35c46a63 / 1000 wei
               gas 2300 * is_zero(value) wei
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
          stor2 = 1
      else:
          unknowncf6744af[caller][3][_param3 << 248].field_512 = block.timestamp
          if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 > -1:
                  revert with 0, 17
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280:
                  revert with 0, 'SafeMath: addition overflow'
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 > -1:
                  revert with 0, 17
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792:
                  revert with 0, 'SafeMath: addition overflow'
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 > -1:
                  revert with 0, 17
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048:
                  revert with 0, 'SafeMath: addition overflow'
              if not unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1536:
                  unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1536 = block.timestamp
              if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > -1:
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                      revert with 0, 'SafeMath: addition overflow'
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > -1:
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                      revert with 0, 'SafeMath: addition overflow'
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > -1:
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                      revert with 0, 'SafeMath: addition overflow'
                  if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > -1:
                      revert with 0, 17
                  if unknowne0dabadd > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
                      revert with 0, 17
                  unknowne0dabadd += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
              else:
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown0ea30489 > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      revert with 0, 17
                  if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      revert with 0, 18
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown0ea30489:
                      revert with 0, 'SafeMath: multiplication overflow'
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                      revert with 0, 'SafeMath: addition overflow'
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                      revert with 0, 'SafeMath: addition overflow'
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                      revert with 0, 'SafeMath: addition overflow'
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                  if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > -1:
                      revert with 0, 17
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
                      revert with 0, 17
                  unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
              if call.value and unknown1deaf5cd > -1 / call.value:
                  revert with 0, 17
              call unknown40d72236Address with:
                 value call.value * unknown1deaf5cd / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              if call.value and unknownf3a6c04f > -1 / call.value:
                  revert with 0, 17
              call unknown3ea3c409Address with:
                 value call.value * unknownf3a6c04f / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              if call.value and unknown140f3bd8 > -1 / call.value:
                  revert with 0, 17
              call unknownb44a4308Address with:
                 value call.value * unknown140f3bd8 / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              if call.value and unknown1cacf693 > -1 / call.value:
                  revert with 0, 17
              call unknowncb9b66a7Address with:
                 value call.value * unknown1cacf693 / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              if call.value and unknown35c46a63 > -1 / call.value:
                  revert with 0, 17
              call unknownbe7cadfaAddress with:
                 value call.value * unknown35c46a63 / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
              stor2 = 1
              return 1
          if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown77bbaf8b > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
              revert with 0, 17
          if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
              revert with 0, 18
          if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown77bbaf8b:
              revert with 0, 'SafeMath: multiplication overflow'
          if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
              revert with 0, 17
          if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280:
              revert with 0, 'SafeMath: addition overflow'
          unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100
          if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
              revert with 0, 17
          if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792:
              revert with 0, 'SafeMath: addition overflow'
          unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100
          if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
              revert with 0, 17
          if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048:
              revert with 0, 'SafeMath: addition overflow'
          unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100
          if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1536:
              if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > -1:
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                      revert with 0, 'SafeMath: addition overflow'
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > -1:
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                      revert with 0, 'SafeMath: addition overflow'
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > -1:
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                      revert with 0, 'SafeMath: addition overflow'
                  if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                      revert with 0, 17
                  if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > -1:
                      revert with 0, 17
                  if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)):
                      revert with 0, 17
                  unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)
                  if call.value and unknown1deaf5cd > -1 / call.value:
                      revert with 0, 17
                  call unknown40d72236Address with:
                     value call.value * unknown1deaf5cd / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknownf3a6c04f > -1 / call.value:
                      revert with 0, 17
                  call unknown3ea3c409Address with:
                     value call.value * unknownf3a6c04f / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown140f3bd8 > -1 / call.value:
                      revert with 0, 17
                  call unknownb44a4308Address with:
                     value call.value * unknown140f3bd8 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown1cacf693 > -1 / call.value:
                      revert with 0, 17
                  call unknowncb9b66a7Address with:
                     value call.value * unknown1cacf693 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown35c46a63 > -1 / call.value:
                      revert with 0, 17
                  call unknownbe7cadfaAddress with:
                     value call.value * unknown35c46a63 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
                  stor2 = 1
                  return 1
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown0ea30489 > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  revert with 0, 17
              if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  revert with 0, 18
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown0ea30489:
                  revert with 0, 'SafeMath: multiplication overflow'
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                  revert with 0, 'SafeMath: addition overflow'
              unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                  revert with 0, 'SafeMath: addition overflow'
              unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
              if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                  revert with 0, 17
              if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
                  revert with 0, 17
              unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
              if call.value and unknown1deaf5cd > -1 / call.value:
                  revert with 0, 17
              call unknown40d72236Address with:
                 value call.value * unknown1deaf5cd / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              if call.value and unknownf3a6c04f > -1 / call.value:
                  revert with 0, 17
              call unknown3ea3c409Address with:
                 value call.value * unknownf3a6c04f / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              if call.value and unknown140f3bd8 > -1 / call.value:
                  revert with 0, 17
              call unknownb44a4308Address with:
                 value call.value * unknown140f3bd8 / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              if call.value and unknown1cacf693 > -1 / call.value:
                  revert with 0, 17
              call unknowncb9b66a7Address with:
                 value call.value * unknown1cacf693 / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              if call.value and unknown35c46a63 > -1 / call.value:
                  revert with 0, 17
              call unknownbe7cadfaAddress with:
                 value call.value * unknown35c46a63 / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
              stor2 = 1
          else:
              unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1536 = block.timestamp
              if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > -1:
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                      revert with 0, 'SafeMath: addition overflow'
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > -1:
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                      revert with 0, 'SafeMath: addition overflow'
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > -1:
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                      revert with 0, 'SafeMath: addition overflow'
                  if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                      revert with 0, 17
                  if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > -1:
                      revert with 0, 17
                  if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)):
                      revert with 0, 17
                  unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)
                  if call.value and unknown1deaf5cd > -1 / call.value:
                      revert with 0, 17
                  call unknown40d72236Address with:
                     value call.value * unknown1deaf5cd / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknownf3a6c04f > -1 / call.value:
                      revert with 0, 17
                  call unknown3ea3c409Address with:
                     value call.value * unknownf3a6c04f / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown140f3bd8 > -1 / call.value:
                      revert with 0, 17
                  call unknownb44a4308Address with:
                     value call.value * unknown140f3bd8 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown1cacf693 > -1 / call.value:
                      revert with 0, 17
                  call unknowncb9b66a7Address with:
                     value call.value * unknown1cacf693 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown35c46a63 > -1 / call.value:
                      revert with 0, 17
                  call unknownbe7cadfaAddress with:
                     value call.value * unknown35c46a63 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
                  stor2 = 1
                  return 1
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown0ea30489 > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  revert with 0, 17
              if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  revert with 0, 18
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown0ea30489:
                  revert with 0, 'SafeMath: multiplication overflow'
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                  revert with 0, 'SafeMath: addition overflow'
              unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                  revert with 0, 'SafeMath: addition overflow'
              unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
              if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                      revert with 0, 17
                  if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
                      revert with 0, 17
                  unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
                  if call.value and unknown1deaf5cd > -1 / call.value:
                      revert with 0, 17
                  call unknown40d72236Address with:
                     value call.value * unknown1deaf5cd / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknownf3a6c04f > -1 / call.value:
                      revert with 0, 17
                  call unknown3ea3c409Address with:
                     value call.value * unknownf3a6c04f / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown140f3bd8 > -1 / call.value:
                      revert with 0, 17
                  call unknownb44a4308Address with:
                     value call.value * unknown140f3bd8 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown1cacf693 > -1 / call.value:
                      revert with 0, 17
                  call unknowncb9b66a7Address with:
                     value call.value * unknown1cacf693 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown35c46a63 > -1 / call.value:
                      revert with 0, 17
                  call unknownbe7cadfaAddress with:
                     value call.value * unknown35c46a63 / 1000 wei
                       gas 2300 * is_zero(value) wei
              else:
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                      revert with 0, 17
                  if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
                      revert with 0, 17
                  unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
                  if call.value and unknown1deaf5cd > -1 / call.value:
                      revert with 0, 17
                  call unknown40d72236Address with:
                     value call.value * unknown1deaf5cd / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknownf3a6c04f > -1 / call.value:
                      revert with 0, 17
                  call unknown3ea3c409Address with:
                     value call.value * unknownf3a6c04f / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown140f3bd8 > -1 / call.value:
                      revert with 0, 17
                  call unknownb44a4308Address with:
                     value call.value * unknown140f3bd8 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown1cacf693 > -1 / call.value:
                      revert with 0, 17
                  call unknowncb9b66a7Address with:
                     value call.value * unknown1cacf693 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown35c46a63 > -1 / call.value:
                      revert with 0, 17
                  call unknownbe7cadfaAddress with:
                     value call.value * unknown35c46a63 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
                  stor2 = 1
  else:
      if not addr(_param2):
          revert with 0, 'Vertex must'
      if unknown36d461a3[addr(_param2)].field_0 != addr(_param2):
          revert with 0, 'Wrong usertop'
      unknowncf6744af[addr(_param1)].field_0 = addr(_param2)
      unknowncf6744af[addr(_param1)].field_256 = addr(_param2)
      if unknowncf6744af[addr(_param2)].field_512 == -1:
          revert with 0, 17
      unknowncf6744af[addr(_param2)].field_512++
      unknowncf6744af[caller].field_0 = unknowncf6744af[addr(_param1)].field_0
      unknowncf6744af[caller].field_256 = addr(_param1)
      if unknowncf6744af[addr(_param1)].field_512 == -1:
          revert with 0, 17
      unknowncf6744af[addr(_param1)].field_512++
      if unknowncf6744af[caller][3][_param3 << 248].field_0 > !(10^12 * ext_call.return_data[0]):
          revert with 0, 17
      if unknowncf6744af[caller][3][_param3 << 248].field_0 + (10^12 * ext_call.return_data < unknowncf6744af[caller][3][_param3 << 248].field_0:
          revert with 0, 'SafeMath: addition overflow'
      unknowncf6744af[caller][3][_param3 << 248].field_0 += 10^12 * ext_call.return_data[0]
      if unknowncf6744af[caller][3][_param3 << 248].field_256 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
          revert with 0, 17
      if unknowncf6744af[caller][3][_param3 << 248].field_256 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowncf6744af[caller][3][_param3 << 248].field_256:
          revert with 0, 'SafeMath: addition overflow'
      unknowncf6744af[caller][3][_param3 << 248].field_256 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
      if unknowncf6744af[caller][3][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
          revert with 0, 17
      if unknowncf6744af[caller][3][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowncf6744af[caller][3][_param3 << 248].field_768:
          revert with 0, 'SafeMath: addition overflow'
      unknowncf6744af[caller][3][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
      if unknowncf6744af[caller][3][_param3 << 248].field_1024 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
          revert with 0, 17
      if unknowncf6744af[caller][3][_param3 << 248].field_1024 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowncf6744af[caller][3][_param3 << 248].field_1024:
          revert with 0, 'SafeMath: addition overflow'
      unknowncf6744af[caller][3][_param3 << 248].field_1024 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
      if unknowncf6744af[caller][3][_param3 << 248].field_512:
          if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 > -1:
                  revert with 0, 17
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280:
                  revert with 0, 'SafeMath: addition overflow'
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 > -1:
                  revert with 0, 17
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792:
                  revert with 0, 'SafeMath: addition overflow'
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 > -1:
                  revert with 0, 17
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048:
                  revert with 0, 'SafeMath: addition overflow'
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1536:
                  if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                          revert with 0, 'SafeMath: addition overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                          revert with 0, 'SafeMath: addition overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                          unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > -1:
                          revert with 0, 17
                      if unknowne0dabadd > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
                          revert with 0, 17
                      unknowne0dabadd += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
                      if call.value and unknown1deaf5cd > -1 / call.value:
                          revert with 0, 17
                      call unknown40d72236Address with:
                         value call.value * unknown1deaf5cd / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknownf3a6c04f > -1 / call.value:
                          revert with 0, 17
                      call unknown3ea3c409Address with:
                         value call.value * unknownf3a6c04f / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown140f3bd8 > -1 / call.value:
                          revert with 0, 17
                      call unknownb44a4308Address with:
                         value call.value * unknown140f3bd8 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown1cacf693 > -1 / call.value:
                          revert with 0, 17
                      call unknowncb9b66a7Address with:
                         value call.value * unknown1cacf693 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown35c46a63 > -1 / call.value:
                          revert with 0, 17
                      call unknownbe7cadfaAddress with:
                         value call.value * unknown35c46a63 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
                      stor2 = 1
                      return 1
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown0ea30489 > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      revert with 0, 17
                  if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      revert with 0, 18
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown0ea30489:
                      revert with 0, 'SafeMath: multiplication overflow'
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                      revert with 0, 'SafeMath: addition overflow'
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                      revert with 0, 'SafeMath: addition overflow'
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                      revert with 0, 'SafeMath: addition overflow'
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > -1:
                          revert with 0, 17
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                          revert with 0, 17
                      if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
                          revert with 0, 17
                      unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
                      if call.value and unknown1deaf5cd > -1 / call.value:
                          revert with 0, 17
                      call unknown40d72236Address with:
                         value call.value * unknown1deaf5cd / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknownf3a6c04f > -1 / call.value:
                          revert with 0, 17
                      call unknown3ea3c409Address with:
                         value call.value * unknownf3a6c04f / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown140f3bd8 > -1 / call.value:
                          revert with 0, 17
                      call unknownb44a4308Address with:
                         value call.value * unknown140f3bd8 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown1cacf693 > -1 / call.value:
                          revert with 0, 17
                      call unknowncb9b66a7Address with:
                         value call.value * unknown1cacf693 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown35c46a63 > -1 / call.value:
                          revert with 0, 17
                      call unknownbe7cadfaAddress with:
                         value call.value * unknown35c46a63 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
                      stor2 = 1
                      return 1
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
              else:
                  unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1536 = block.timestamp
                  if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                          revert with 0, 'SafeMath: addition overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                          revert with 0, 'SafeMath: addition overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                          unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > -1:
                          revert with 0, 17
                      if unknowne0dabadd > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
                          revert with 0, 17
                      unknowne0dabadd += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
                      if call.value and unknown1deaf5cd > -1 / call.value:
                          revert with 0, 17
                      call unknown40d72236Address with:
                         value call.value * unknown1deaf5cd / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknownf3a6c04f > -1 / call.value:
                          revert with 0, 17
                      call unknown3ea3c409Address with:
                         value call.value * unknownf3a6c04f / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown140f3bd8 > -1 / call.value:
                          revert with 0, 17
                      call unknownb44a4308Address with:
                         value call.value * unknown140f3bd8 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown1cacf693 > -1 / call.value:
                          revert with 0, 17
                      call unknowncb9b66a7Address with:
                         value call.value * unknown1cacf693 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown35c46a63 > -1 / call.value:
                          revert with 0, 17
                      call unknownbe7cadfaAddress with:
                         value call.value * unknown35c46a63 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
                      stor2 = 1
                      return 1
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown0ea30489 > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      revert with 0, 17
                  if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      revert with 0, 18
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown0ea30489:
                      revert with 0, 'SafeMath: multiplication overflow'
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                      revert with 0, 'SafeMath: addition overflow'
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                      revert with 0, 'SafeMath: addition overflow'
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                      revert with 0, 'SafeMath: addition overflow'
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                  if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > -1:
                  revert with 0, 17
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                  revert with 0, 17
              if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
                  revert with 0, 17
              unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
              if call.value and unknown1deaf5cd > -1 / call.value:
                  revert with 0, 17
              call unknown40d72236Address with:
                 value call.value * unknown1deaf5cd / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              if call.value and unknownf3a6c04f > -1 / call.value:
                  revert with 0, 17
              call unknown3ea3c409Address with:
                 value call.value * unknownf3a6c04f / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              if call.value and unknown140f3bd8 > -1 / call.value:
                  revert with 0, 17
              call unknownb44a4308Address with:
                 value call.value * unknown140f3bd8 / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              if call.value and unknown1cacf693 > -1 / call.value:
                  revert with 0, 17
              call unknowncb9b66a7Address with:
                 value call.value * unknown1cacf693 / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              if call.value and unknown35c46a63 > -1 / call.value:
                  revert with 0, 17
              call unknownbe7cadfaAddress with:
                 value call.value * unknown35c46a63 / 1000 wei
                   gas 2300 * is_zero(value) wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
              stor2 = 1
          else:
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown77bbaf8b > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  revert with 0, 17
              if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  revert with 0, 18
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown77bbaf8b:
                  revert with 0, 'SafeMath: multiplication overflow'
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                  revert with 0, 17
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280:
                  revert with 0, 'SafeMath: addition overflow'
              unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                  revert with 0, 17
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792:
                  revert with 0, 'SafeMath: addition overflow'
              unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                  revert with 0, 17
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048:
                  revert with 0, 'SafeMath: addition overflow'
              unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1536:
                  if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                          revert with 0, 'SafeMath: addition overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                          revert with 0, 'SafeMath: addition overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                          if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                              revert with 0, 17
                          if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > -1:
                              revert with 0, 17
                          if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)):
                              revert with 0, 17
                          unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)
                          if call.value and unknown1deaf5cd > -1 / call.value:
                              revert with 0, 17
                          call unknown40d72236Address with:
                             value call.value * unknown1deaf5cd / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknownf3a6c04f > -1 / call.value:
                              revert with 0, 17
                          call unknown3ea3c409Address with:
                             value call.value * unknownf3a6c04f / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknown140f3bd8 > -1 / call.value:
                              revert with 0, 17
                          call unknownb44a4308Address with:
                             value call.value * unknown140f3bd8 / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknown1cacf693 > -1 / call.value:
                              revert with 0, 17
                          call unknowncb9b66a7Address with:
                             value call.value * unknown1cacf693 / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknown35c46a63 > -1 / call.value:
                              revert with 0, 17
                          call unknownbe7cadfaAddress with:
                             value call.value * unknown35c46a63 / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
                          stor2 = 1
                          return 1
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                          revert with 0, 17
                      if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > -1:
                          revert with 0, 17
                      if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)):
                          revert with 0, 17
                      unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)
                      if call.value and unknown1deaf5cd > -1 / call.value:
                          revert with 0, 17
                      call unknown40d72236Address with:
                         value call.value * unknown1deaf5cd / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknownf3a6c04f > -1 / call.value:
                          revert with 0, 17
                      call unknown3ea3c409Address with:
                         value call.value * unknownf3a6c04f / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown140f3bd8 > -1 / call.value:
                          revert with 0, 17
                      call unknownb44a4308Address with:
                         value call.value * unknown140f3bd8 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown1cacf693 > -1 / call.value:
                          revert with 0, 17
                      call unknowncb9b66a7Address with:
                         value call.value * unknown1cacf693 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown35c46a63 > -1 / call.value:
                          revert with 0, 17
                      call unknownbe7cadfaAddress with:
                         value call.value * unknown35c46a63 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
                      stor2 = 1
                  else:
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown0ea30489 > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                          revert with 0, 17
                      if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                          revert with 0, 18
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown0ea30489:
                          revert with 0, 'SafeMath: multiplication overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                          revert with 0, 'SafeMath: addition overflow'
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                          revert with 0, 'SafeMath: addition overflow'
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                          if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                              revert with 0, 17
                          if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                              revert with 0, 17
                          if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
                              revert with 0, 17
                          unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
                          if call.value and unknown1deaf5cd > -1 / call.value:
                              revert with 0, 17
                          call unknown40d72236Address with:
                             value call.value * unknown1deaf5cd / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknownf3a6c04f > -1 / call.value:
                              revert with 0, 17
                          call unknown3ea3c409Address with:
                             value call.value * unknownf3a6c04f / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknown140f3bd8 > -1 / call.value:
                              revert with 0, 17
                          call unknownb44a4308Address with:
                             value call.value * unknown140f3bd8 / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknown1cacf693 > -1 / call.value:
                              revert with 0, 17
                          call unknowncb9b66a7Address with:
                             value call.value * unknown1cacf693 / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknown35c46a63 > -1 / call.value:
                              revert with 0, 17
                      else:
                          unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                          if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                              revert with 0, 17
                          if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                              revert with 0, 17
                          if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
                              revert with 0, 17
                          unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
                          if call.value and unknown1deaf5cd > -1 / call.value:
                              revert with 0, 17
                          call unknown40d72236Address with:
                             value call.value * unknown1deaf5cd / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknownf3a6c04f > -1 / call.value:
                              revert with 0, 17
                          call unknown3ea3c409Address with:
                             value call.value * unknownf3a6c04f / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknown140f3bd8 > -1 / call.value:
                              revert with 0, 17
                          call unknownb44a4308Address with:
                             value call.value * unknown140f3bd8 / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknown1cacf693 > -1 / call.value:
                              revert with 0, 17
                          call unknowncb9b66a7Address with:
                             value call.value * unknown1cacf693 / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
              else:
                  unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1536 = block.timestamp
                  if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                          revert with 0, 'SafeMath: addition overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                          revert with 0, 'SafeMath: addition overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                          unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                          revert with 0, 17
                      if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > -1:
                          revert with 0, 17
                      if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)):
                          revert with 0, 17
                      unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)
                      if call.value and unknown1deaf5cd > -1 / call.value:
                          revert with 0, 17
                      call unknown40d72236Address with:
                         value call.value * unknown1deaf5cd / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknownf3a6c04f > -1 / call.value:
                          revert with 0, 17
                      call unknown3ea3c409Address with:
                         value call.value * unknownf3a6c04f / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown140f3bd8 > -1 / call.value:
                          revert with 0, 17
                      call unknownb44a4308Address with:
                         value call.value * unknown140f3bd8 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown1cacf693 > -1 / call.value:
                          revert with 0, 17
                      call unknowncb9b66a7Address with:
                         value call.value * unknown1cacf693 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown35c46a63 > -1 / call.value:
                          revert with 0, 17
                      call unknownbe7cadfaAddress with:
                         value call.value * unknown35c46a63 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
                      stor2 = 1
                  else:
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown0ea30489 > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                          revert with 0, 17
                      if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                          revert with 0, 18
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown0ea30489:
                          revert with 0, 'SafeMath: multiplication overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                          revert with 0, 'SafeMath: addition overflow'
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                          revert with 0, 'SafeMath: addition overflow'
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                      if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                          unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                          revert with 0, 17
                      if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                          revert with 0, 17
                      if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
                          revert with 0, 17
                      unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
                      if call.value and unknown1deaf5cd > -1 / call.value:
                          revert with 0, 17
                      call unknown40d72236Address with:
                         value call.value * unknown1deaf5cd / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknownf3a6c04f > -1 / call.value:
                          revert with 0, 17
                      call unknown3ea3c409Address with:
                         value call.value * unknownf3a6c04f / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown140f3bd8 > -1 / call.value:
                          revert with 0, 17
                      call unknownb44a4308Address with:
                         value call.value * unknown140f3bd8 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown1cacf693 > -1 / call.value:
                          revert with 0, 17
                      call unknowncb9b66a7Address with:
                         value call.value * unknown1cacf693 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
      else:
          unknowncf6744af[caller][3][_param3 << 248].field_512 = block.timestamp
          if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 > -1:
                  revert with 0, 17
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280:
                  revert with 0, 'SafeMath: addition overflow'
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 > -1:
                  revert with 0, 17
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792:
                  revert with 0, 'SafeMath: addition overflow'
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 > -1:
                  revert with 0, 17
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048:
                  revert with 0, 'SafeMath: addition overflow'
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1536:
                  if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                          revert with 0, 'SafeMath: addition overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                          revert with 0, 'SafeMath: addition overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                          unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > -1:
                          revert with 0, 17
                      if unknowne0dabadd > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
                          revert with 0, 17
                      unknowne0dabadd += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
                      if call.value and unknown1deaf5cd > -1 / call.value:
                          revert with 0, 17
                      call unknown40d72236Address with:
                         value call.value * unknown1deaf5cd / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknownf3a6c04f > -1 / call.value:
                          revert with 0, 17
                      call unknown3ea3c409Address with:
                         value call.value * unknownf3a6c04f / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown140f3bd8 > -1 / call.value:
                          revert with 0, 17
                      call unknownb44a4308Address with:
                         value call.value * unknown140f3bd8 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown1cacf693 > -1 / call.value:
                          revert with 0, 17
                      call unknowncb9b66a7Address with:
                         value call.value * unknown1cacf693 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown35c46a63 > -1 / call.value:
                          revert with 0, 17
                      call unknownbe7cadfaAddress with:
                         value call.value * unknown35c46a63 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
                      stor2 = 1
                      return 1
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown0ea30489 > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      revert with 0, 17
                  if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      revert with 0, 18
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown0ea30489:
                      revert with 0, 'SafeMath: multiplication overflow'
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                      revert with 0, 'SafeMath: addition overflow'
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                      revert with 0, 'SafeMath: addition overflow'
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                      revert with 0, 'SafeMath: addition overflow'
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                  if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > -1:
                      revert with 0, 17
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
                      revert with 0, 17
                  unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
                  if call.value and unknown1deaf5cd > -1 / call.value:
                      revert with 0, 17
                  call unknown40d72236Address with:
                     value call.value * unknown1deaf5cd / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknownf3a6c04f > -1 / call.value:
                      revert with 0, 17
                  call unknown3ea3c409Address with:
                     value call.value * unknownf3a6c04f / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown140f3bd8 > -1 / call.value:
                      revert with 0, 17
                  call unknownb44a4308Address with:
                     value call.value * unknown140f3bd8 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown1cacf693 > -1 / call.value:
                      revert with 0, 17
                  call unknowncb9b66a7Address with:
                     value call.value * unknown1cacf693 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if call.value and unknown35c46a63 > -1 / call.value:
                      revert with 0, 17
                  call unknownbe7cadfaAddress with:
                     value call.value * unknown35c46a63 / 1000 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
                  stor2 = 1
              else:
                  unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1536 = block.timestamp
                  if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                          revert with 0, 'SafeMath: addition overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                          revert with 0, 'SafeMath: addition overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                          unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > -1:
                          revert with 0, 17
                      if unknowne0dabadd > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
                          revert with 0, 17
                      unknowne0dabadd += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
                      if call.value and unknown1deaf5cd > -1 / call.value:
                          revert with 0, 17
                      call unknown40d72236Address with:
                         value call.value * unknown1deaf5cd / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknownf3a6c04f > -1 / call.value:
                          revert with 0, 17
                      call unknown3ea3c409Address with:
                         value call.value * unknownf3a6c04f / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown140f3bd8 > -1 / call.value:
                          revert with 0, 17
                      call unknownb44a4308Address with:
                         value call.value * unknown140f3bd8 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown1cacf693 > -1 / call.value:
                          revert with 0, 17
                      call unknowncb9b66a7Address with:
                         value call.value * unknown1cacf693 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown35c46a63 > -1 / call.value:
                          revert with 0, 17
                      call unknownbe7cadfaAddress with:
                         value call.value * unknown35c46a63 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
                      stor2 = 1
                      return 1
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown0ea30489 > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      revert with 0, 17
                  if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      revert with 0, 18
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown0ea30489:
                      revert with 0, 'SafeMath: multiplication overflow'
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                      revert with 0, 'SafeMath: addition overflow'
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                      revert with 0, 'SafeMath: addition overflow'
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                      revert with 0, 17
                  if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                      revert with 0, 'SafeMath: addition overflow'
                  unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                  if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > -1:
                          revert with 0, 17
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                          revert with 0, 17
                      if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
                          revert with 0, 17
                      unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
                      if call.value and unknown1deaf5cd > -1 / call.value:
                          revert with 0, 17
                      call unknown40d72236Address with:
                         value call.value * unknown1deaf5cd / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknownf3a6c04f > -1 / call.value:
                          revert with 0, 17
                      call unknown3ea3c409Address with:
                         value call.value * unknownf3a6c04f / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown140f3bd8 > -1 / call.value:
                          revert with 0, 17
                      call unknownb44a4308Address with:
                         value call.value * unknown140f3bd8 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown1cacf693 > -1 / call.value:
                          revert with 0, 17
                      call unknowncb9b66a7Address with:
                         value call.value * unknown1cacf693 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown35c46a63 > -1 / call.value:
                          revert with 0, 17
                      call unknownbe7cadfaAddress with:
                         value call.value * unknown35c46a63 / 1000 wei
                           gas 2300 * is_zero(value) wei
                  else:
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > -1:
                          revert with 0, 17
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                          revert with 0, 17
                      if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
                          revert with 0, 17
                      unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
                      if call.value and unknown1deaf5cd > -1 / call.value:
                          revert with 0, 17
                      call unknown40d72236Address with:
                         value call.value * unknown1deaf5cd / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknownf3a6c04f > -1 / call.value:
                          revert with 0, 17
                      call unknown3ea3c409Address with:
                         value call.value * unknownf3a6c04f / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown140f3bd8 > -1 / call.value:
                          revert with 0, 17
                      call unknownb44a4308Address with:
                         value call.value * unknown140f3bd8 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown1cacf693 > -1 / call.value:
                          revert with 0, 17
                      call unknowncb9b66a7Address with:
                         value call.value * unknown1cacf693 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown35c46a63 > -1 / call.value:
                          revert with 0, 17
                      call unknownbe7cadfaAddress with:
                         value call.value * unknown35c46a63 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
                      stor2 = 1
          else:
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown77bbaf8b > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  revert with 0, 17
              if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  revert with 0, 18
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown77bbaf8b:
                  revert with 0, 'SafeMath: multiplication overflow'
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                  revert with 0, 17
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280:
                  revert with 0, 'SafeMath: addition overflow'
              unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1280 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                  revert with 0, 17
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792:
                  revert with 0, 'SafeMath: addition overflow'
              unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1792 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                  revert with 0, 17
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) < unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048:
                  revert with 0, 'SafeMath: addition overflow'
              unknowncf6744af[addr(_param1)][3][_param3 << 248].field_2048 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100
              if unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1536:
                  if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                          revert with 0, 'SafeMath: addition overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                          revert with 0, 'SafeMath: addition overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                          unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                          revert with 0, 17
                      if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > -1:
                          revert with 0, 17
                      if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)):
                          revert with 0, 17
                      unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)
                      if call.value and unknown1deaf5cd > -1 / call.value:
                          revert with 0, 17
                      call unknown40d72236Address with:
                         value call.value * unknown1deaf5cd / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknownf3a6c04f > -1 / call.value:
                          revert with 0, 17
                      call unknown3ea3c409Address with:
                         value call.value * unknownf3a6c04f / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown140f3bd8 > -1 / call.value:
                          revert with 0, 17
                      call unknownb44a4308Address with:
                         value call.value * unknown140f3bd8 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown1cacf693 > -1 / call.value:
                          revert with 0, 17
                      call unknowncb9b66a7Address with:
                         value call.value * unknown1cacf693 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown35c46a63 > -1 / call.value:
                          revert with 0, 17
                      call unknownbe7cadfaAddress with:
                         value call.value * unknown35c46a63 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
                      stor2 = 1
                  else:
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown0ea30489 > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                          revert with 0, 17
                      if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                          revert with 0, 18
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown0ea30489:
                          revert with 0, 'SafeMath: multiplication overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                          revert with 0, 'SafeMath: addition overflow'
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                          revert with 0, 'SafeMath: addition overflow'
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                      if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                          unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                          revert with 0, 17
                      if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                          revert with 0, 17
                      if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
                          revert with 0, 17
                      unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
                      if call.value and unknown1deaf5cd > -1 / call.value:
                          revert with 0, 17
                      call unknown40d72236Address with:
                         value call.value * unknown1deaf5cd / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknownf3a6c04f > -1 / call.value:
                          revert with 0, 17
                      call unknown3ea3c409Address with:
                         value call.value * unknownf3a6c04f / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown140f3bd8 > -1 / call.value:
                          revert with 0, 17
                      call unknownb44a4308Address with:
                         value call.value * unknown140f3bd8 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown1cacf693 > -1 / call.value:
                          revert with 0, 17
                      call unknowncb9b66a7Address with:
                         value call.value * unknown1cacf693 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
              else:
                  unknowncf6744af[addr(_param1)][3][_param3 << 248].field_1536 = block.timestamp
                  if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                          revert with 0, 'SafeMath: addition overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                          revert with 0, 'SafeMath: addition overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                          unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                          if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                              revert with 0, 17
                          if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > -1:
                              revert with 0, 17
                          if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)):
                              revert with 0, 17
                          unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)
                          if call.value and unknown1deaf5cd > -1 / call.value:
                              revert with 0, 17
                          call unknown40d72236Address with:
                             value call.value * unknown1deaf5cd / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknownf3a6c04f > -1 / call.value:
                              revert with 0, 17
                          call unknown3ea3c409Address with:
                             value call.value * unknownf3a6c04f / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknown140f3bd8 > -1 / call.value:
                              revert with 0, 17
                          call unknownb44a4308Address with:
                             value call.value * unknown140f3bd8 / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknown1cacf693 > -1 / call.value:
                              revert with 0, 17
                          call unknowncb9b66a7Address with:
                             value call.value * unknown1cacf693 / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknown35c46a63 > -1 / call.value:
                              revert with 0, 17
                          call unknownbe7cadfaAddress with:
                             value call.value * unknown35c46a63 / 1000 wei
                               gas 2300 * is_zero(value) wei
                      else:
                          if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                              revert with 0, 17
                          if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > -1:
                              revert with 0, 17
                          if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)):
                              revert with 0, 17
                          unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100)
                          if call.value and unknown1deaf5cd > -1 / call.value:
                              revert with 0, 17
                          call unknown40d72236Address with:
                             value call.value * unknown1deaf5cd / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknownf3a6c04f > -1 / call.value:
                              revert with 0, 17
                          call unknown3ea3c409Address with:
                             value call.value * unknownf3a6c04f / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknown140f3bd8 > -1 / call.value:
                              revert with 0, 17
                          call unknownb44a4308Address with:
                             value call.value * unknown140f3bd8 / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknown1cacf693 > -1 / call.value:
                              revert with 0, 17
                          call unknowncb9b66a7Address with:
                             value call.value * unknown1cacf693 / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if call.value and unknown35c46a63 > -1 / call.value:
                              revert with 0, 17
                          call unknownbe7cadfaAddress with:
                             value call.value * unknown35c46a63 / 1000 wei
                               gas 2300 * is_zero(value) wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          log 0xefd8abd5: caller, addr(_param1), unknowncf6744af[caller].field_0, call.value, 10^12 * ext_call.return_dataount, unknowncf6744af[caller]3 << 248].field_768, block.timestamp
                          stor2 = 1
                  else:
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown0ea30489 > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                          revert with 0, 17
                      if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                          revert with 0, 18
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown0ea30489:
                          revert with 0, 'SafeMath: multiplication overflow'
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0:
                          revert with 0, 'SafeMath: addition overflow'
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_0 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512:
                          revert with 0, 'SafeMath: addition overflow'
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_512 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                          revert with 0, 17
                      if unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100) < unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100
                      if not unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256:
                          unknown36d461a3[stor27[addr(_param1)].field_0][1][_param3 << 248].field_256 = block.timestamp
                      if 10^12 * ext_call.return_data * unknown1950833a / changeAmount > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100):
                          revert with 0, 17
                      if (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100):
                          revert with 0, 17
                      if unknowne0dabadd > !((10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)):
                          revert with 0, 17
                      unknowne0dabadd = unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 100) + (10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown0ea30489 / 100)
                      if call.value and unknown1deaf5cd > -1 / call.value:
                          revert with 0, 17
                      call unknown40d72236Address with:
                         value call.value * unknown1deaf5cd / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknownf3a6c04f > -1 / call.value:
                          revert with 0, 17
                      call unknown3ea3c409Address with:
                         value call.value * unknownf3a6c04f / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown140f3bd8 > -1 / call.value:
                          revert with 0, 17
                      call unknownb44a4308Address with:
                         value call.value * unknown140f3bd8 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if call.value and unknown1cacf693 > -1 / call.value:
                          revert with 0, 17
                      call unknowncb9b66a7Address with:
                         value call.value * unknown1cacf693 / 1000 wei
                           gas 2300 * is_zero(value) wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)

def _fallback() payable: # default function
  if calldata.size < 4:
      require not calldata.size
      stop
  if 2180092382 <= uint32(call.func_hash) >> 224:
      if 3208131664 <= uint32(call.func_hash) >> 224:
          if getToken(uint256 tokenId) > uint32(call.func_hash) >> 224:
              if getCoin(uint256 n) <= uint32(call.func_hash) >> 224:
                  if uint32(call.func_hash) >> 224 != getCoin(uint256 n):
                      if fee() == uint32(call.func_hash) >> 224:
                          require not call.value
                          return fee
                      if 3743305698 == uint32(call.func_hash) >> 224:
                          require not call.value
                          return unknowndf1e4fe2Address
                      require 3772431069 == uint32(call.func_hash) >> 224
                      require not call.value
                      return unknowne0dabadd
                  require not call.value
                  require calldata.size - 4 >=ΓÇ▓ 32
                  if owner != caller:
                      revert with 0, 'Ownable: caller is not the owner'
                  call unknowndf1e4fe2Address with:
                     value _param1 wei
                       gas 2300 * is_zero(value) wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
              else:
                  if 3208131664 == uint32(call.func_hash) >> 224:
                      require not call.value
                      return unknownbf383450
                  if 3415959207 == uint32(call.func_hash) >> 224:
                      require not call.value
                      return unknowncb9b66a7Address
                  if uint32(call.func_hash) >> 224 != 3451602449:
                      require 3479651503 == uint32(call.func_hash) >> 224
                      require not call.value
                      require calldata.size - 4 >=ΓÇ▓ 64
                      require _param1 == addr(_param1)
                      require _param2 == uint8(_param2)
                      return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1280, 
                             unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536,
                             unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792,
                             unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048
                  require not call.value
                  require calldata.size - 4 >=ΓÇ▓ 32
                  require _param1 == addr(_param1)
                  if owner != caller:
                      revert with 0, 'Ownable: caller is not the owner'
                  unknown36d461a3[addr(_param1)].field_0 = addr(_param1)
                  unknowncf6744af[addr(_param1)].field_0 = addr(_param1)
                  unknowncf6744af[addr(_param1)].field_256 = addr(_param1)
          else:
              if 3971868134 <= uint32(call.func_hash) >> 224:
                  if 3971868134 == uint32(call.func_hash) >> 224:
                      require not call.value
                      require ext_code.size(tokenAddr)
                      static call tokenAddr.balanceOf(address tokenOwner) with:
                              gas gas_remaining wei
                             args this.address
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=ΓÇ▓ 32
                      return ext_call.return_data[0]
                  if transferOwnership(address newOwner) == uint32(call.func_hash) >> 224:
                      require not call.value
                      require calldata.size - 4 >=ΓÇ▓ 32
                      require _param1 == addr(_param1)
                      if owner != caller:
                          revert with 0, 'Ownable: caller is not the owner'
                      if not addr(_param1):
                          revert with 0, 'Ownable: new owner is the zero address'
                      log OwnershipTransferred(
                            address previousOwner=owner,
                            address newOwner=addr(_param1))
                      owner = addr(_param1)
                      stop
                  if 4087791695 == uint32(call.func_hash) >> 224:
                      require not call.value
                      return unknownf3a6c04f
                  if uint32(call.func_hash) >> 224 != 4152741072:
                      require open() == uint32(call.func_hash) >> 224
                      require not call.value
                      return bool(open)
                  require not call.value
                  require calldata.size - 4 >=ΓÇ▓ 64
                  if owner != caller:
                      revert with 0, 'Ownable: caller is not the owner'
                  if 1 == _param1:
                      unknown1deaf5cd = _param2
                  else:
                      if 2 == _param1:
                          unknownf3a6c04f = _param2
                      else:
                          if 3 == _param1:
                              unknown140f3bd8 = _param2
                          else:
                              if 4 == _param1:
                                  unknown1cacf693 = _param2
                              else:
                                  if 5 == _param1:
                                      unknown35c46a63 = _param2
                                  else:
                                      if 7 == _param1:
                                          unknown77bbaf8b = _param2
                                      else:
                                          if 8 == _param1:
                                              unknown0ea30489 = _param2
              else:
                  if getToken(uint256 tokenId) == uint32(call.func_hash) >> 224:
                      require not call.value
                      require calldata.size - 4 >=ΓÇ▓ 32
                      if owner != caller:
                          revert with 0, 'Ownable: caller is not the owner'
                      require ext_code.size(tokenAddr)
                      static call tokenAddr.balanceOf(address tokenOwner) with:
                              gas gas_remaining wei
                             args this.address
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=ΓÇ▓ 32
                      if ext_call.return_data <= _param1:
                          revert with 0, 'Insufficient funds'
                      require ext_code.size(tokenAddr)
                      call tokenAddr.transfer(address to, uint256 tokens) with:
                           gas gas_remaining wei
                          args unknowndf1e4fe2Address, _param1
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=ΓÇ▓ 32
                      require ext_call.return_data == bool(ext_call.return_data[0])
                  else:
                      if 3848268015 == uint32(call.func_hash) >> 224:
                          require not call.value
                          require calldata.size - 4 >=ΓÇ▓ 32
                          require _param1 == addr(_param1)
                          return unknown36d461a3[_param1].field_0
                      if 3938145826 == uint32(call.func_hash) >> 224:
                          require not call.value
                          require calldata.size - 4 >=ΓÇ▓ 32
                          require _param1 == _param1 % 16777216
                          if owner != caller:
                              revert with 0, 'Ownable: caller is not the owner'
                          fee = _param1 % 16777216
                      else:
                          require setAddr(uint256 acc, address addr) == uint32(call.func_hash) >> 224
                          require not call.value
                          require calldata.size - 4 >=ΓÇ▓ 64
                          require _param2 == addr(_param2)
                          if owner != caller:
                              revert with 0, 'Ownable: caller is not the owner'
                          if 1 == _param1:
                              unknown40d72236Address = addr(_param2)
                          else:
                              if 2 == _param1:
                                  unknown3ea3c409Address = addr(_param2)
                              else:
                                  if 3 == _param1:
                                      unknownb44a4308Address = addr(_param2)
                                  else:
                                      if 4 == _param1:
                                          unknowncb9b66a7Address = addr(_param2)
                                      else:
                                          if 5 == _param1:
                                              unknownbe7cadfaAddress = addr(_param2)
                                          else:
                                              if 7 == _param1:
                                                  tokenAddr = addr(_param2)
                                              else:
                                                  if 8 == _param1:
                                                      unknowndf1e4fe2Address = addr(_param2)
                                                  else:
                                                      if 9 == _param1:
                                                          unknown1554e1ceAddress = addr(_param2)
                                                      else:
                                                          if 10 == _param1:
                                                              addr(unknownaf589da3Address) = addr(_param2)
          return 1
      if changeAmount() <= uint32(call.func_hash) >> 224:
          if 3005600078 <= uint32(call.func_hash) >> 224:
              if 3005600078 == uint32(call.func_hash) >> 224:
                  require not call.value
                  require calldata.size - 4 >=ΓÇ▓ 64
                  require _param1 == addr(_param1)
                  require _param2 == uint8(_param2)
                  return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_256, 
                         unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512,
                         unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768,
                         unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024
              if 3024765704 == uint32(call.func_hash) >> 224:
                  require not call.value
                  return unknownb44a4308Address
              if uint32(call.func_hash) >> 224 != 3106090339:
                  if 3195323063 == uint32(call.func_hash) >> 224:
                      require not call.value
                      require calldata.size - 4 >=ΓÇ▓ 32
                      return unknownbe74c2b7[_param1]
                  require 3195842042 == uint32(call.func_hash) >> 224
                  require not call.value
                  return unknownbe7cadfaAddress
              require not call.value
              require calldata.size - 4 >=ΓÇ▓ 32
              require _param1 == addr(_param1)
              if owner != caller:
                  revert with 0, 'Ownable: caller is not the owner'
              priceAddress = addr(_param1)
              return 1
          if changeAmount() == uint32(call.func_hash) >> 224:
              require not call.value
              return changeAmount
          if uint32(call.func_hash) >> 224 != 2915936173:
              if uint32(call.func_hash) >> 224 != setLockTime(uint256 newLockTime):
                  require 2941820323 == uint32(call.func_hash) >> 224
                  require not call.value
                  return addr(unknownaf589da3Address)
              require not call.value
              require calldata.size - 4 >=ΓÇ▓ 32
              if owner != caller:
                  revert with 0, 'Ownable: caller is not the owner'
              lockTime = _param1
              return 1
          require not call.value
          require calldata.size - 4 >=ΓÇ▓ 64
          require _param1 == addr(_param1)
          require _param2 == uint8(_param2)
          if not unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
                  revert with 0, 17
              return unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 > block.timestamp:
              revert with 0, 'SafeMath: subtraction overflow'
          if block.timestamp < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
              revert with 0, 17
          if block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 < 1:
              if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
                  revert with 0, 17
              return unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768
          if not block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if 0 / lockTime <= unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  if 0 / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0 / lockTime:
                      revert with 0, 17
                  return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime))
          else:
              if block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 and unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512 > -1 / block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
                  revert with 0, 17
              if not block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
                  revert with 0, 18
              if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 != unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512:
                  revert with 0, 'SafeMath: multiplication overflow'
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime <= unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                      revert with 0, 17
                  return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime))
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              revert with 0, 17
          else:
              return 0
      if owner() <= uint32(call.func_hash) >> 224:
          if owner() == uint32(call.func_hash) >> 224:
              require not call.value
              return owner
          if hasAccess(address who) == uint32(call.func_hash) >> 224:
              require not call.value
              require calldata.size - 4 >=ΓÇ▓ 32
              require _param1 == addr(_param1)
              return bool(stor1[addr(_param1)])
          if 2573964397 == uint32(call.func_hash) >> 224:
              require not call.value
              require calldata.size - 4 >=ΓÇ▓ 64
              require _param1 == addr(_param1)
              require _param2 == uint8(_param2)
              if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  return 0
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
                  revert with 0, 'SafeMath: subtraction overflow'
              if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 17
              if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
                  return 0
              if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      return (0 / lockTime)
              else:
                  if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                      revert with 0, 17
                  if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
                      revert with 0, 'SafeMath: multiplication overflow'
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      return ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime)
              return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048
          require 2728662449 == uint32(call.func_hash) >> 224
          require not call.value
          require calldata.size - 4 >=ΓÇ▓ 64
          require _param1 == addr(_param1)
          require _param2 == uint8(_param2)
          if not unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              return 0
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 > block.timestamp:
              revert with 0, 'SafeMath: subtraction overflow'
          if block.timestamp < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
              revert with 0, 17
          if block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 < 1:
              return 0
          if not block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if 0 / lockTime <= unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  return (0 / lockTime)
          else:
              if block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 and unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512 > -1 / block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
                  revert with 0, 17
              if not block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
                  revert with 0, 18
              if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 != unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512:
                  revert with 0, 'SafeMath: multiplication overflow'
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime <= unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  return ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime)
          return unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768
      if 2180092382 == uint32(call.func_hash) >> 224:
          require not call.value
          require calldata.size - 4 >=ΓÇ▓ 64
          require _param1 == addr(_param1)
          require _param2 == uint8(_param2)
          if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
                  revert with 0, 17
              return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
              revert with 0, 'SafeMath: subtraction overflow'
          if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 17
          if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
              if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
                  revert with 0, 17
              return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048
          if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if 0 / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0 / lockTime:
                      revert with 0, 17
                  return (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime))
          else:
              if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 17
              if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
                  revert with 0, 'SafeMath: multiplication overflow'
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime:
                      revert with 0, 17
                  return (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime))
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 17
          else:
              return 0
      if uint32(call.func_hash) >> 224 != 2196440825:
          if uint32(call.func_hash) >> 224 != revokeAccess(address address):
              require 2312424680 == uint32(call.func_hash) >> 224
              require not call.value
              return unknown89d4cce8
          require not call.value
          require calldata.size - 4 >=ΓÇ▓ 32
          require _param1 == addr(_param1)
          if owner != caller:
              revert with 0, 'Ownable: caller is not the owner'
          stor1[addr(_param1)] = 0
          log 0xdaa6f74a: 0, addr(_param1)
          stop
      require not call.value
      require calldata.size - 4 >=ΓÇ▓ 32
      require _param1 == uint8(_param1)
      if tx.origin != caller:
          revert with 0, 'not user'
      if not unknown36d461a3[caller][1][_param1 << 248].field_768:
          log 0xf06b551c: caller, 0, block.timestamp
          return 0
      if unknown36d461a3[caller][1][_param1 << 248].field_256 > block.timestamp:
          revert with 0, 'SafeMath: subtraction overflow'
      if block.timestamp < unknown36d461a3[caller][1][_param1 << 248].field_256:
          revert with 0, 17
      if block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256 < 1:
          log 0xf06b551c: caller, 0, block.timestamp
          return 0
      if not block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256:
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if 0 / lockTime <= unknown36d461a3[caller][1][_param1 << 248].field_768:
              if 0 / lockTime:
                  require ext_code.size(tokenAddr)
                  call tokenAddr.transfer(address to, uint256 tokens) with:
                       gas gas_remaining wei
                      args caller, 0 / lockTime
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=ΓÇ▓ 32
                  require ext_call.return_data == bool(ext_call.return_data[0])
                  if 0 / lockTime > unknown36d461a3[caller][1][_param1 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[caller][1][_param1 << 248].field_768 < 0 / lockTime:
                      revert with 0, 17
                  unknown36d461a3[caller][1][_param1 << 248].field_768 -= 0 / lockTime
                  if 100000 < unknown36d461a3[caller][1][_param1 << 248].field_768 - (0 / lockTime):
                      unknown36d461a3[caller][1][_param1 << 248].field_256 = block.timestamp
                  else:
                      unknown36d461a3[caller][1][_param1 << 248].field_512 = 0
                      unknown36d461a3[caller][1][_param1 << 248].field_768 = 0
                      unknown36d461a3[caller][1][_param1 << 248].field_256 = 0
              log 0xf06b551c: caller, 0 / lockTime, block.timestamp
              return (0 / lockTime)
      else:
          if block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256 and unknown36d461a3[caller][1][_param1 << 248].field_512 > -1 / block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256:
              revert with 0, 17
          if not block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256:
              revert with 0, 18
          if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256 != unknown36d461a3[caller][1][_param1 << 248].field_512:
              revert with 0, 'SafeMath: multiplication overflow'
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime <= unknown36d461a3[caller][1][_param1 << 248].field_768:
              if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                  require ext_code.size(tokenAddr)
                  call tokenAddr.transfer(address to, uint256 tokens) with:
                       gas gas_remaining wei
                      args caller, (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=ΓÇ▓ 32
                  require ext_call.return_data == bool(ext_call.return_data[0])
                  if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > unknown36d461a3[caller][1][_param1 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[caller][1][_param1 << 248].field_768 < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                      revert with 0, 17
                  unknown36d461a3[caller][1][_param1 << 248].field_768 -= (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime
                  if 100000 < unknown36d461a3[caller][1][_param1 << 248].field_768 - ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime):
                      unknown36d461a3[caller][1][_param1 << 248].field_256 = block.timestamp
                  else:
                      unknown36d461a3[caller][1][_param1 << 248].field_512 = 0
                      unknown36d461a3[caller][1][_param1 << 248].field_768 = 0
                      unknown36d461a3[caller][1][_param1 << 248].field_256 = 0
              log 0xf06b551c: caller, (block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime, block.timestamp
              return ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime)
      if unknown36d461a3[caller][1][_param1 << 248].field_768:
          require ext_code.size(tokenAddr)
          call tokenAddr.transfer(address to, uint256 tokens) with:
               gas gas_remaining wei
              args caller, unknown36d461a3[caller][1][_param1 << 248].field_768
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >=ΓÇ▓ 32
          require ext_call.return_data == bool(ext_call.return_data[0])
          if unknown36d461a3[caller][1][_param1 << 248].field_768 > unknown36d461a3[caller][1][_param1 << 248].field_768:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
              revert with 0, 17
          unknown36d461a3[caller][1][_param1 << 248].field_768 -= unknown36d461a3[caller][1][_param1 << 248].field_768
          if 100000 < unknown36d461a3[caller][1][_param1 << 248].field_768 - unknown36d461a3[caller][1][_param1 << 248].field_768:
              unknown36d461a3[caller][1][_param1 << 248].field_256 = block.timestamp
          else:
              unknown36d461a3[caller][1][_param1 << 248].field_512 = 0
              unknown36d461a3[caller][1][_param1 << 248].field_768 = 0
              unknown36d461a3[caller][1][_param1 << 248].field_256 = 0
      log 0xf06b551c: caller, unknown36d461a3[caller]1 << 248].field_768, block.timestamp
      return unknown36d461a3[caller][1][_param1 << 248].field_768
  if 902064739 > uint32(call.func_hash) >> 224:
      if 424706874 > uint32(call.func_hash) >> 224:
          if getprice() > uint32(call.func_hash) >> 224:
              if grantAccess(address address) == uint32(call.func_hash) >> 224:
                  require not call.value
                  require calldata.size - 4 >=ΓÇ▓ 32
                  require _param1 == addr(_param1)
                  if owner != caller:
                      revert with 0, 'Ownable: caller is not the owner'
                  stor1[addr(_param1)] = 1
                  log 0xdaa6f74a: 1, addr(_param1)
                  stop
              if uint32(call.func_hash) >> 224 != 210978704:
                  if lockTime() == uint32(call.func_hash) >> 224:
                      require not call.value
                      return lockTime
                  require 245564553 == uint32(call.func_hash) >> 224
                  require not call.value
                  return unknown0ea30489
              require not call.value
              require calldata.size - 4 >=ΓÇ▓ 64
              if owner != caller:
                  revert with 0, 'Ownable: caller is not the owner'
              changeAmount = _param1
              unknown1950833a = _param2
              return 1
          if getprice() == uint32(call.func_hash) >> 224:
              require not call.value
              return priceAddress
          if 336542680 == uint32(call.func_hash) >> 224:
              require not call.value
              return unknown140f3bd8
          if 357884366 == uint32(call.func_hash) >> 224:
              require not call.value
              return unknown1554e1ceAddress
          require 387255743 == uint32(call.func_hash) >> 224
          require not call.value
          require calldata.size - 4 >=ΓÇ▓ 64
          require _param1 == addr(_param1)
          require _param2 == uint8(_param2)
          return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_256, 
                 unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1280,
                 unknown36d461a3[addr(_param1)][1][_param2 << 248].field_0,
                 unknowncf6744af[addr(_param1)][3][_param2 << 248].field_0
      if 550732329 > uint32(call.func_hash) >> 224:
          if 424706874 == uint32(call.func_hash) >> 224:
              require not call.value
              return unknown1950833a
          if userInfo(address user) == uint32(call.func_hash) >> 224:
              require not call.value
              require calldata.size - 4 >=ΓÇ▓ 32
              require _param1 == addr(_param1)
              return unknowncf6744af[_param1].field_0, unknowncf6744af[_param1].field_256, unknowncf6744af[_param1].field_512
          if 481097363 == uint32(call.func_hash) >> 224:
              require not call.value
              return unknown1cacf693
          require 501937613 == uint32(call.func_hash) >> 224
          require not call.value
          return unknown1deaf5cd
      if 550732329 == uint32(call.func_hash) >> 224:
          require not call.value
          require calldata.size - 4 >=ΓÇ▓ 64
          require _param1 == addr(_param1)
          require _param2 == uint8(_param2)
          if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
              return 0
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 > block.timestamp:
              revert with 0, 'SafeMath: subtraction overflow'
          if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512:
              revert with 0, 17
          if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 < 1:
              return 0
          if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512:
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
                  return (0 / lockTime)
          else:
              if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512:
                  revert with 0, 17
              if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: multiplication overflow'
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
                  return ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) / lockTime)
          return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024
      if 628568989 == uint32(call.func_hash) >> 224:
          require not call.value
          require calldata.size - 4 >=ΓÇ▓ 32
          if owner != caller:
              revert with 0, 'Ownable: caller is not the owner'
          unknownbf383450 = _param1
          return 1
      if uint32(call.func_hash) >> 224 != 654728914:
          if uint32(call.func_hash) >> 224 != 746176686:
              require setTokenAddr(address tokenAddr) == uint32(call.func_hash) >> 224
              require not call.value
              require calldata.size - 4 >=ΓÇ▓ 32
              require _param1 == addr(_param1)
              if owner != caller:
                  revert with 0, 'Ownable: caller is not the owner'
              require addr(_param1)
              tokenAddr = addr(_param1)
              return 1
          require not call.value
          require calldata.size - 4 >=ΓÇ▓ 64
          require _param1 == addr(_param1)
          require _param2 == uint8(_param2)
          if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
              if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024 < 0:
                  revert with 0, 17
              return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 > block.timestamp:
              revert with 0, 'SafeMath: subtraction overflow'
          if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512:
              revert with 0, 17
          if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 < 1:
              if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024 < 0:
                  revert with 0, 17
              return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024
          if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512:
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
                  if 0 / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024 < 0 / lockTime:
                      revert with 0, 17
                  return (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024 - (0 / lockTime))
          else:
              if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512:
                  revert with 0, 17
              if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: multiplication overflow'
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
                  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024 < (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) / lockTime:
                      revert with 0, 17
                  return (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_512 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_768) / lockTime))
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024 < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1024:
              revert with 0, 17
          else:
              return 0
      require not call.value
      require calldata.size - 4 >=ΓÇ▓ 32
      require _param1 == uint8(_param1)
      if tx.origin != caller:
          revert with 0, 'not user'
      if not unknowncf6744af[caller][3][_param1 << 248].field_1024:
          log 0x79543468: caller, 0, block.timestamp
          return 0
      if unknowncf6744af[caller][3][_param1 << 248].field_512 > block.timestamp:
          revert with 0, 'SafeMath: subtraction overflow'
      if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_512:
          revert with 0, 17
      if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_512 < 1:
          log 0x79543468: caller, 0, block.timestamp
          return 0
      if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_512:
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_1024:
              if 0 / lockTime:
                  require ext_code.size(tokenAddr)
                  call tokenAddr.transfer(address to, uint256 tokens) with:
                       gas gas_remaining wei
                      args caller, 0 / lockTime
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=ΓÇ▓ 32
                  require ext_call.return_data == bool(ext_call.return_data[0])
                  if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_1024:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[caller][3][_param1 << 248].field_1024 < 0 / lockTime:
                      revert with 0, 17
                  unknowncf6744af[caller][3][_param1 << 248].field_1024 -= 0 / lockTime
                  if 100000 < unknowncf6744af[caller][3][_param1 << 248].field_1024 - (0 / lockTime):
                      unknowncf6744af[caller][3][_param1 << 248].field_512 = block.timestamp
                  else:
                      unknowncf6744af[caller][3][_param1 << 248].field_768 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_1024 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_512 = 0
              log 0x79543468: caller, 0 / lockTime, block.timestamp
              return (0 / lockTime)
      else:
          if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_512 and unknowncf6744af[caller][3][_param1 << 248].field_768 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_512:
              revert with 0, 17
          if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_512:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_768) - (unknowncf6744af[caller][3][_param1 << 248].field_512 * unknowncf6744af[caller][3][_param1 << 248].field_768) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_512 != unknowncf6744af[caller][3][_param1 << 248].field_768:
              revert with 0, 'SafeMath: multiplication overflow'
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_768) - (unknowncf6744af[caller][3][_param1 << 248].field_512 * unknowncf6744af[caller][3][_param1 << 248].field_768) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_1024:
              if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_768) - (unknowncf6744af[caller][3][_param1 << 248].field_512 * unknowncf6744af[caller][3][_param1 << 248].field_768) / lockTime:
                  require ext_code.size(tokenAddr)
                  call tokenAddr.transfer(address to, uint256 tokens) with:
                       gas gas_remaining wei
                      args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_768) - (unknowncf6744af[caller][3][_param1 << 248].field_512 * unknowncf6744af[caller][3][_param1 << 248].field_768) / lockTime
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=ΓÇ▓ 32
                  require ext_call.return_data == bool(ext_call.return_data[0])
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_768) - (unknowncf6744af[caller][3][_param1 << 248].field_512 * unknowncf6744af[caller][3][_param1 << 248].field_768) / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_1024:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[caller][3][_param1 << 248].field_1024 < (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_768) - (unknowncf6744af[caller][3][_param1 << 248].field_512 * unknowncf6744af[caller][3][_param1 << 248].field_768) / lockTime:
                      revert with 0, 17
                  unknowncf6744af[caller][3][_param1 << 248].field_1024 -= (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_768) - (unknowncf6744af[caller][3][_param1 << 248].field_512 * unknowncf6744af[caller][3][_param1 << 248].field_768) / lockTime
                  if 100000 < unknowncf6744af[caller][3][_param1 << 248].field_1024 - ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_768) - (unknowncf6744af[caller][3][_param1 << 248].field_512 * unknowncf6744af[caller][3][_param1 << 248].field_768) / lockTime):
                      unknowncf6744af[caller][3][_param1 << 248].field_512 = block.timestamp
                  else:
                      unknowncf6744af[caller][3][_param1 << 248].field_768 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_1024 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_512 = 0
              log 0x79543468: caller, (block.timestamp * unknowncf6744af[caller]1 << 248].field_768) - (unknowncf6744af[caller]1 << 248].field_512 * unknowncf6744af[caller]1 << 248].field_768) / lockTime, block.timestamp
              return ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_768) - (unknowncf6744af[caller][3][_param1 << 248].field_512 * unknowncf6744af[caller][3][_param1 << 248].field_768) / lockTime)
      if unknowncf6744af[caller][3][_param1 << 248].field_1024:
          require ext_code.size(tokenAddr)
          call tokenAddr.transfer(address to, uint256 tokens) with:
               gas gas_remaining wei
              args caller, unknowncf6744af[caller][3][_param1 << 248].field_1024
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >=ΓÇ▓ 32
          require ext_call.return_data == bool(ext_call.return_data[0])
          if unknowncf6744af[caller][3][_param1 << 248].field_1024 > unknowncf6744af[caller][3][_param1 << 248].field_1024:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknowncf6744af[caller][3][_param1 << 248].field_1024 < unknowncf6744af[caller][3][_param1 << 248].field_1024:
              revert with 0, 17
          unknowncf6744af[caller][3][_param1 << 248].field_1024 -= unknowncf6744af[caller][3][_param1 << 248].field_1024
          if 100000 < unknowncf6744af[caller][3][_param1 << 248].field_1024 - unknowncf6744af[caller][3][_param1 << 248].field_1024:
              unknowncf6744af[caller][3][_param1 << 248].field_512 = block.timestamp
          else:
              unknowncf6744af[caller][3][_param1 << 248].field_768 = 0
              unknowncf6744af[caller][3][_param1 << 248].field_1024 = 0
              unknowncf6744af[caller][3][_param1 << 248].field_512 = 0
      log 0x79543468: caller, unknowncf6744af[caller]1 << 248].field_1024, block.timestamp
      return unknowncf6744af[caller][3][_param1 << 248].field_1024
  if 1370727688 > uint32(call.func_hash) >> 224:
      if 1087840822 > uint32(call.func_hash) >> 224:
          if 902064739 == uint32(call.func_hash) >> 224:
              require not call.value
              return unknown35c46a63
          if 919888291 == uint32(call.func_hash) >> 224:
              require not call.value
              require calldata.size - 4 >=ΓÇ▓ 64
              require _param1 == addr(_param1)
              require _param2 == uint8(_param2)
              return unknown36d461a3[addr(_param1)][1][_param2 << 248].field_0, 
                     unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256,
                     unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512,
                     unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768
          if uint32(call.func_hash) >> 224 != 955830048:
              require 1050919945 == uint32(call.func_hash) >> 224
              require not call.value
              return unknown3ea3c409Address
          require not call.value
          require calldata.size - 4 >=ΓÇ▓ 128
          require _param1 == addr(_param1)
          require _param3 == addr(_param3)
          require _param4 == _param4 % 16777216
          require ext_code.size(priceAddress)
          static call priceAddress.0xe9de5ee9 with:
                  gas gas_remaining wei
                 args addr(_param1), _param2, addr(_param3), _param4 % 16777216
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >=ΓÇ▓ 32
          return ext_call.return_data[0]
      if 1087840822 == uint32(call.func_hash) >> 224:
          require not call.value
          return unknown40d72236Address
      if 1137252041 == uint32(call.func_hash) >> 224:
          require not call.value
          require calldata.size - 4 >=ΓÇ▓ 64
          if owner != caller:
              revert with 0, 'Ownable: caller is not the owner'
          if 1 == _param1:
              unknown5e745bde = _param2
          else:
              if 2 == _param1:
                  unknown89d4cce8 = _param2
          return 1
      if uint32(call.func_hash) >> 224 != 1208614626:
          require 1351754445 == uint32(call.func_hash) >> 224
          require not call.value
          require calldata.size - 4 >=ΓÇ▓ 32
          require _param1 == addr(_param1)
          return bool(unknowncf6744af[addr(_param1)].field_256)
      require not call.value
      require calldata.size - 4 >=ΓÇ▓ 32
      require _param1 == uint8(_param1)
      if tx.origin != caller:
          revert with 0, 'not user'
      if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
          log 0x18ae5e1c: caller, 0, block.timestamp
          return 0
      if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
          revert with 0, 'SafeMath: subtraction overflow'
      if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
          revert with 0, 17
      if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
          log 0x18ae5e1c: caller, 0, block.timestamp
          return 0
      if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
              if 0 / lockTime:
                  require ext_code.size(tokenAddr)
                  call tokenAddr.transfer(address to, uint256 tokens) with:
                       gas gas_remaining wei
                      args caller, 0 / lockTime
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=ΓÇ▓ 32
                  require ext_call.return_data == bool(ext_call.return_data[0])
                  if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                      revert with 0, 17
                  unknowncf6744af[caller][3][_param1 << 248].field_2048 -= 0 / lockTime
                  if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - (0 / lockTime):
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                  else:
                      unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
              log 0x18ae5e1c: caller, 0 / lockTime, block.timestamp
              return (0 / lockTime)
      else:
          if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
              revert with 0, 17
          if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
              revert with 0, 'SafeMath: multiplication overflow'
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
              if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                  require ext_code.size(tokenAddr)
                  call tokenAddr.transfer(address to, uint256 tokens) with:
                       gas gas_remaining wei
                      args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=ΓÇ▓ 32
                  require ext_call.return_data == bool(ext_call.return_data[0])
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                      revert with 0, 17
                  unknowncf6744af[caller][3][_param1 << 248].field_2048 -= (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                  if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                  else:
                      unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                      unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
              log 0x18ae5e1c: caller, (block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime, block.timestamp
              return ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime)
      if unknowncf6744af[caller][3][_param1 << 248].field_2048:
          require ext_code.size(tokenAddr)
          call tokenAddr.transfer(address to, uint256 tokens) with:
               gas gas_remaining wei
              args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >=ΓÇ▓ 32
          require ext_call.return_data == bool(ext_call.return_data[0])
          if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
              revert with 0, 17
          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
          else:
              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
      log 0x18ae5e1c: caller, unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
      return unknowncf6744af[caller][3][_param1 << 248].field_2048
  if 1765139183 <= uint32(call.func_hash) >> 224:
      if 1765139183 == uint32(call.func_hash) >> 224:
          require not call.value
          require calldata.size - 4 >=ΓÇ▓ 64
          require _param1 == addr(_param1)
          require _param2 == uint8(_param2)
          if not unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
                      revert with 0, 17
                  if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
                      revert with 0, 17
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 17
                  return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
                  revert with 0, 'SafeMath: subtraction overflow'
              if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 17
              if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
                  if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
                      revert with 0, 17
                  if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
                      revert with 0, 17
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 17
                  return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
              if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      if 0 / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0 / lockTime:
                          revert with 0, 17
                      if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
                          revert with 0, 17
                      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime)):
                          revert with 0, 17
                      return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime))
              else:
                  if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                      revert with 0, 17
                  if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
                      revert with 0, 'SafeMath: multiplication overflow'
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime:
                          revert with 0, 17
                      if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
                          revert with 0, 17
                      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime)):
                          revert with 0, 17
                      return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime))
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 17
              if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
                  revert with 0, 17
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !0:
                  revert with 0, 17
              return unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 > block.timestamp:
              revert with 0, 'SafeMath: subtraction overflow'
          if block.timestamp < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
              revert with 0, 17
          if block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 < 1:
              if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
                      revert with 0, 17
                  if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
                      revert with 0, 17
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 17
                  return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
                  revert with 0, 'SafeMath: subtraction overflow'
              if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 17
              if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
                  if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
                      revert with 0, 17
                  if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
                      revert with 0, 17
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 17
                  return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
              if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      if 0 / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0 / lockTime:
                          revert with 0, 17
                      if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
                          revert with 0, 17
                      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime)):
                          revert with 0, 17
                      return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime))
              else:
                  if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                      revert with 0, 17
                  if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
                      revert with 0, 'SafeMath: multiplication overflow'
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime:
                          revert with 0, 17
                      if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
                          revert with 0, 17
                      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime)):
                          revert with 0, 17
                      return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime))
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 17
              if 0 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0:
                  revert with 0, 17
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !0:
                  revert with 0, 17
              return unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768
          if not block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if 0 / lockTime <= unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
                          revert with 0, 17
                      if 0 / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0 / lockTime:
                          revert with 0, 17
                      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime) > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                          revert with 0, 17
                      return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                      revert with 0, 17
                  if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
                      if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
                          revert with 0, 17
                      if 0 / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0 / lockTime:
                          revert with 0, 17
                      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime) > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                          revert with 0, 17
                      return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
                  if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                      if lockTime <= 0:
                          revert with 0, 'SafeMath: division by zero'
                      if not lockTime:
                          revert with 0, 18
                      if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                          if 0 / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0 / lockTime:
                              revert with 0, 17
                          if 0 / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0 / lockTime:
                              revert with 0, 17
                          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime) > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime)):
                              revert with 0, 17
                          return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (2 * 0 / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
                  else:
                      if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                          revert with 0, 17
                      if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                          revert with 0, 18
                      if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
                          revert with 0, 'SafeMath: multiplication overflow'
                      if lockTime <= 0:
                          revert with 0, 'SafeMath: division by zero'
                      if not lockTime:
                          revert with 0, 18
                      if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                          if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime:
                              revert with 0, 17
                          if 0 / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0 / lockTime:
                              revert with 0, 17
                          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime) > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime)):
                              revert with 0, 17
                          return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime))
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 17
                  if 0 / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < 0 / lockTime:
                      revert with 0, 17
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime) > !0:
                      revert with 0, 17
                  return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - (0 / lockTime))
          else:
              if block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 and unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512 > -1 / block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
                  revert with 0, 17
              if not block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
                  revert with 0, 18
              if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 != unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512:
                  revert with 0, 'SafeMath: multiplication overflow'
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime <= unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
                          revert with 0, 17
                      if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                          revert with 0, 17
                      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                          revert with 0, 17
                      return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                      revert with 0, 17
                  if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
                      if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
                          revert with 0, 17
                      if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                          revert with 0, 17
                      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                          revert with 0, 17
                      return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
                  if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                      if lockTime <= 0:
                          revert with 0, 'SafeMath: division by zero'
                      if not lockTime:
                          revert with 0, 18
                      if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                          if 0 / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0 / lockTime:
                              revert with 0, 17
                          if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                              revert with 0, 17
                          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime)):
                              revert with 0, 17
                          return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime))
                  else:
                      if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                          revert with 0, 17
                      if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                          revert with 0, 18
                      if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
                          revert with 0, 'SafeMath: multiplication overflow'
                      if lockTime <= 0:
                          revert with 0, 'SafeMath: division by zero'
                      if not lockTime:
                          revert with 0, 18
                      if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                          if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime:
                              revert with 0, 17
                          if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                              revert with 0, 17
                          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime)):
                              revert with 0, 17
                          return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime))
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 17
                  if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                      revert with 0, 17
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) > !0:
                      revert with 0, 17
                  return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 - ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime))
          if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
                  revert with 0, 17
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 17
              if 0 > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 17
              return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
              revert with 0, 'SafeMath: subtraction overflow'
          if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 17
          if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
              if 0 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
                  revert with 0, 17
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 17
              if 0 > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 17
              return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048
          if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if 0 / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      revert with 0, 17
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                      revert with 0, 17
                  else:
                      return 0
              if 0 / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0 / lockTime:
                  revert with 0, 17
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 17
              if 0 > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime)):
                  revert with 0, 17
              return (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - (0 / lockTime))
          if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 17
          if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
              revert with 0, 'SafeMath: multiplication overflow'
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 17
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 17
              else:
                  return 0
          if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime > unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime:
              revert with 0, 17
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              revert with 0, 'SafeMath: subtraction overflow'
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              revert with 0, 17
          if 0 > !(unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime)):
              revert with 0, 17
          return (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 - ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime))
      if setOpen(bool open) == uint32(call.func_hash) >> 224:
          require not call.value
          require calldata.size - 4 >=ΓÇ▓ 32
          require _param1 == bool(_param1)
          if owner != caller:
              revert with 0, 'Ownable: caller is not the owner'
          open = uint8(bool(_param1))
          return 1
      if renounceOwnership() == uint32(call.func_hash) >> 224:
          require not call.value
          if owner != caller:
              revert with 0, 'Ownable: caller is not the owner'
          log OwnershipTransferred(
                address previousOwner=owner,
                address newOwner=0)
          owner = 0
          stop
      if 2008788875 == uint32(call.func_hash) >> 224:
          require not call.value
          return unknown77bbaf8b
      require 2011612194 == uint32(call.func_hash) >> 224
      require not call.value
      require calldata.size - 4 >=ΓÇ▓ 64
      require _param1 == addr(_param1)
      require _param2 == uint8(_param2)
      if not unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              return 0
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
              revert with 0, 'SafeMath: subtraction overflow'
          if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 17
          if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
              return 0
          if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if 0 > !(0 / lockTime):
                      revert with 0, 17
                  if 0 / lockTime < 0:
                      revert with 0, 'SafeMath: addition overflow'
                  return (0 / lockTime)
          else:
              if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 17
              if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
                  revert with 0, 'SafeMath: multiplication overflow'
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if 0 > !((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime):
                      revert with 0, 17
                  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime < 0:
                      revert with 0, 'SafeMath: addition overflow'
                  return ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime)
          if 0 > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 17
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
              revert with 0, 'SafeMath: addition overflow'
          return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 > block.timestamp:
          revert with 0, 'SafeMath: subtraction overflow'
      if block.timestamp < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
          revert with 0, 17
      if block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 < 1:
          if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              return 0
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
              revert with 0, 'SafeMath: subtraction overflow'
          if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 17
          if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
              return 0
          if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if 0 > !(0 / lockTime):
                      revert with 0, 17
                  if 0 / lockTime < 0:
                      revert with 0, 'SafeMath: addition overflow'
                  return (0 / lockTime)
          else:
              if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 17
              if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
                  revert with 0, 'SafeMath: multiplication overflow'
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if 0 > !((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime):
                      revert with 0, 17
                  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime < 0:
                      revert with 0, 'SafeMath: addition overflow'
                  return ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime)
          if 0 > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              revert with 0, 17
          if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0:
              revert with 0, 'SafeMath: addition overflow'
          return unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048
      if not block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if 0 / lockTime <= unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if 0 / lockTime > -1:
                      revert with 0, 17
                  if 0 / lockTime < 0 / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  return (0 / lockTime)
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
                  revert with 0, 'SafeMath: subtraction overflow'
              if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 17
              if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
                  if 0 / lockTime > -1:
                      revert with 0, 17
                  if 0 / lockTime < 0 / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  return (0 / lockTime)
              if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      if 0 / lockTime > !(0 / lockTime):
                          revert with 0, 17
                      if 2 * 0 / lockTime < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return (2 * 0 / lockTime)
              else:
                  if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                      revert with 0, 17
                  if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
                      revert with 0, 'SafeMath: multiplication overflow'
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      if 0 / lockTime > !((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime):
                          revert with 0, 17
                      if (0 / lockTime) + ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime) < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return ((0 / lockTime) + ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime))
              if 0 / lockTime > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 17
              if (0 / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < 0 / lockTime:
                  revert with 0, 'SafeMath: addition overflow'
              return ((0 / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
      else:
          if block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 and unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512 > -1 / block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
              revert with 0, 17
          if not block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256:
              revert with 0, 18
          if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / block.timestamp - unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 != unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512:
              revert with 0, 'SafeMath: multiplication overflow'
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime <= unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > -1:
                      revert with 0, 17
                  if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  return ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime)
              if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
                  revert with 0, 'SafeMath: subtraction overflow'
              if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  revert with 0, 17
              if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
                  if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > -1:
                      revert with 0, 17
                  if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                      revert with 0, 'SafeMath: addition overflow'
                  return ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime)
              if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > !(0 / lockTime):
                          revert with 0, 17
                      if ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + (0 / lockTime) < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return (((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + (0 / lockTime))
              else:
                  if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                      revert with 0, 17
                  if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
                      revert with 0, 'SafeMath: multiplication overflow'
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                      if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > !((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime):
                          revert with 0, 17
                      if ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime) < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return (((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime))
              if (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
                  revert with 0, 17
              if ((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < (block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime:
                  revert with 0, 'SafeMath: addition overflow'
              return (((block.timestamp * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) - (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_256 * unknown36d461a3[addr(_param1)][1][_param2 << 248].field_512) / lockTime) + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
      if not unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > -1:
              revert with 0, 17
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              revert with 0, 'SafeMath: addition overflow'
          return unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768
      if unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 > block.timestamp:
          revert with 0, 'SafeMath: subtraction overflow'
      if block.timestamp < unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
          revert with 0, 17
      if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 < 1:
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > -1:
              revert with 0, 17
          if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
              revert with 0, 'SafeMath: addition overflow'
          return unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768
      if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if 0 / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !(0 / lockTime):
                  revert with 0, 17
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + (0 / lockTime) < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + (0 / lockTime))
      else:
          if block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 and unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 17
          if not block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / block.timestamp - unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 != unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792:
              revert with 0, 'SafeMath: multiplication overflow'
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if (block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime <= unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime):
                  revert with 0, 17
              if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime) < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + ((block.timestamp * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) - (unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1536 * unknowncf6744af[addr(_param1)][3][_param2 << 248].field_1792) / lockTime))
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 > !unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048:
          revert with 0, 17
      if unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048 < unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768:
          revert with 0, 'SafeMath: addition overflow'
      return (unknown36d461a3[addr(_param1)][1][_param2 << 248].field_768 + unknowncf6744af[addr(_param1)][3][_param2 << 248].field_2048)
  if 1370727688 == uint32(call.func_hash) >> 224:
      require not call.value
      require calldata.size - 4 >=ΓÇ▓ 32
      require _param1 == uint8(_param1)
      if tx.origin != caller:
          revert with 0, 'not user'
      if not unknown36d461a3[caller][1][_param1 << 248].field_768:
          if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
              log 0xbc17dcbe: caller, 0, block.timestamp
              return 0
          if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
              revert with 0, 'SafeMath: subtraction overflow'
          if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
              revert with 0, 17
          if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
              log 0xbc17dcbe: caller, 0, block.timestamp
              return 0
          if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  if 0 / lockTime:
                      require ext_code.size(tokenAddr)
                      call tokenAddr.transfer(address to, uint256 tokens) with:
                           gas gas_remaining wei
                          args caller, 0 / lockTime
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=ΓÇ▓ 32
                      require ext_call.return_data == bool(ext_call.return_data[0])
                      if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                          revert with 0, 17
                      unknowncf6744af[caller][3][_param1 << 248].field_2048 -= 0 / lockTime
                      if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - (0 / lockTime):
                          unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                      else:
                          unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                          unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                  if 0 > !(0 / lockTime):
                      revert with 0, 17
                  if 0 / lockTime < 0:
                      revert with 0, 'SafeMath: addition overflow'
                  log 0xbc17dcbe: caller, 0 / lockTime, block.timestamp
                  if 0 > !(0 / lockTime):
                      revert with 0, 17
                  if 0 / lockTime < 0:
                      revert with 0, 'SafeMath: addition overflow'
                  return (0 / lockTime)
          else:
              if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                  revert with 0, 17
              if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
                  revert with 0, 'SafeMath: multiplication overflow'
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                      require ext_code.size(tokenAddr)
                      call tokenAddr.transfer(address to, uint256 tokens) with:
                           gas gas_remaining wei
                          args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=ΓÇ▓ 32
                      require ext_call.return_data == bool(ext_call.return_data[0])
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                          revert with 0, 17
                      unknowncf6744af[caller][3][_param1 << 248].field_2048 -= (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                      if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                          unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                      else:
                          unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                          unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                  if 0 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                      revert with 0, 17
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime < 0:
                      revert with 0, 'SafeMath: addition overflow'
                  log 0xbc17dcbe: caller, (block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime, block.timestamp
                  if 0 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                      revert with 0, 17
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime < 0:
                      revert with 0, 'SafeMath: addition overflow'
                  return ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime)
          if unknowncf6744af[caller][3][_param1 << 248].field_2048:
              require ext_code.size(tokenAddr)
              call tokenAddr.transfer(address to, uint256 tokens) with:
                   gas gas_remaining wei
                  args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              require ext_call.return_data == bool(ext_call.return_data[0])
              if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  revert with 0, 17
              unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
              if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
              else:
                  unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                  unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                  unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
          if 0 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
              revert with 0, 17
          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0:
              revert with 0, 'SafeMath: addition overflow'
          log 0xbc17dcbe: caller, unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
          if 0 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
              revert with 0, 17
          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0:
              revert with 0, 'SafeMath: addition overflow'
          return unknowncf6744af[caller][3][_param1 << 248].field_2048
      if unknown36d461a3[caller][1][_param1 << 248].field_256 > block.timestamp:
          revert with 0, 'SafeMath: subtraction overflow'
      if block.timestamp < unknown36d461a3[caller][1][_param1 << 248].field_256:
          revert with 0, 17
      if block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256 < 1:
          if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
              log 0xbc17dcbe: caller, 0, block.timestamp
              return 0
          if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
              revert with 0, 'SafeMath: subtraction overflow'
          if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
              revert with 0, 17
          if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
              log 0xbc17dcbe: caller, 0, block.timestamp
              return 0
          if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  if 0 / lockTime:
                      require ext_code.size(tokenAddr)
                      call tokenAddr.transfer(address to, uint256 tokens) with:
                           gas gas_remaining wei
                          args caller, 0 / lockTime
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=ΓÇ▓ 32
                      require ext_call.return_data == bool(ext_call.return_data[0])
                      if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                          revert with 0, 17
                      unknowncf6744af[caller][3][_param1 << 248].field_2048 -= 0 / lockTime
                      if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - (0 / lockTime):
                          unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                      else:
                          unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                          unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                  if 0 > !(0 / lockTime):
                      revert with 0, 17
                  if 0 / lockTime < 0:
                      revert with 0, 'SafeMath: addition overflow'
                  log 0xbc17dcbe: caller, 0 / lockTime, block.timestamp
                  if 0 > !(0 / lockTime):
                      revert with 0, 17
                  if 0 / lockTime < 0:
                      revert with 0, 'SafeMath: addition overflow'
                  return (0 / lockTime)
          else:
              if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                  revert with 0, 17
              if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
                  revert with 0, 'SafeMath: multiplication overflow'
              if lockTime <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if not lockTime:
                  revert with 0, 18
              if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                      require ext_code.size(tokenAddr)
                      call tokenAddr.transfer(address to, uint256 tokens) with:
                           gas gas_remaining wei
                          args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=ΓÇ▓ 32
                      require ext_call.return_data == bool(ext_call.return_data[0])
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                          revert with 0, 17
                      unknowncf6744af[caller][3][_param1 << 248].field_2048 -= (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                      if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                          unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                      else:
                          unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                          unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                  if 0 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                      revert with 0, 17
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime < 0:
                      revert with 0, 'SafeMath: addition overflow'
                  log 0xbc17dcbe: caller, (block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime, block.timestamp
                  if 0 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                      revert with 0, 17
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime < 0:
                      revert with 0, 'SafeMath: addition overflow'
                  return ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime)
          if unknowncf6744af[caller][3][_param1 << 248].field_2048:
              require ext_code.size(tokenAddr)
              call tokenAddr.transfer(address to, uint256 tokens) with:
                   gas gas_remaining wei
                  args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              require ext_call.return_data == bool(ext_call.return_data[0])
              if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  revert with 0, 'SafeMath: subtraction overflow'
              if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  revert with 0, 17
              unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
              if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
                  unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
              else:
                  unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                  unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                  unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
          if 0 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
              revert with 0, 17
          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0:
              revert with 0, 'SafeMath: addition overflow'
          log 0xbc17dcbe: caller, unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
          if 0 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
              revert with 0, 17
          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0:
              revert with 0, 'SafeMath: addition overflow'
          return unknowncf6744af[caller][3][_param1 << 248].field_2048
      if block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256:
          if block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256 and unknown36d461a3[caller][1][_param1 << 248].field_512 > -1 / block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256:
              revert with 0, 17
          if not block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256:
              revert with 0, 18
          if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / block.timestamp - unknown36d461a3[caller][1][_param1 << 248].field_256 != unknown36d461a3[caller][1][_param1 << 248].field_512:
              revert with 0, 'SafeMath: multiplication overflow'
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime <= unknown36d461a3[caller][1][_param1 << 248].field_768:
              if not (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                  if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > -1:
                          revert with 0, 17
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, (block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime, block.timestamp
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > -1:
                          revert with 0, 17
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime)
                  if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 17
                  if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > -1:
                          revert with 0, 17
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, (block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime, block.timestamp
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > -1:
                          revert with 0, 17
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime)
                  if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      if lockTime <= 0:
                          revert with 0, 'SafeMath: division by zero'
                      if not lockTime:
                          revert with 0, 18
                      if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          if not 0 / lockTime:
                              if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !(0 / lockTime):
                                  revert with 0, 17
                              if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + (0 / lockTime) < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, ((block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime) + (0 / lockTime), block.timestamp
                              if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !(0 / lockTime):
                                  revert with 0, 17
                              if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + (0 / lockTime) < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                                  revert with 0, 'SafeMath: addition overflow'
                              return (((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + (0 / lockTime))
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, 0 / lockTime
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= 0 / lockTime
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - (0 / lockTime):
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                          if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !(0 / lockTime):
                              revert with 0, 17
                          if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + (0 / lockTime) < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                              revert with 0, 'SafeMath: addition overflow'
                          log 0xbc17dcbe: caller, ((block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime) + (0 / lockTime), block.timestamp
                      else:
                          if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 17
                              if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, ((block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime) + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
                              if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 17
                              if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                                  revert with 0, 'SafeMath: addition overflow'
                              return (((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048)
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                          if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 17
                          if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                              revert with 0, 'SafeMath: addition overflow'
                          log 0xbc17dcbe: caller, ((block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime) + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
                  else:
                      if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                          revert with 0, 17
                      if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                          revert with 0, 18
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
                          revert with 0, 'SafeMath: multiplication overflow'
                      if lockTime <= 0:
                          revert with 0, 'SafeMath: division by zero'
                      if not lockTime:
                          revert with 0, 18
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          if not (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                              if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                                  revert with 0, 17
                              if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, ((block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime) + ((block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime), block.timestamp
                              if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                                  revert with 0, 17
                              if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                                  revert with 0, 'SafeMath: addition overflow'
                              return (((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime))
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                      else:
                          if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 17
                              if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, ((block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime) + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
                              if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 17
                              if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                                  revert with 0, 'SafeMath: addition overflow'
                              return (((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048)
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                          if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 17
              else:
                  require ext_code.size(tokenAddr)
                  call tokenAddr.transfer(address to, uint256 tokens) with:
                       gas gas_remaining wei
                      args caller, (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=ΓÇ▓ 32
                  require ext_call.return_data == bool(ext_call.return_data[0])
                  if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > unknown36d461a3[caller][1][_param1 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[caller][1][_param1 << 248].field_768 < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                      revert with 0, 17
                  unknown36d461a3[caller][1][_param1 << 248].field_768 -= (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime
                  if 100000 < unknown36d461a3[caller][1][_param1 << 248].field_768 - ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime):
                      unknown36d461a3[caller][1][_param1 << 248].field_256 = block.timestamp
                  else:
                      unknown36d461a3[caller][1][_param1 << 248].field_512 = 0
                      unknown36d461a3[caller][1][_param1 << 248].field_768 = 0
                      unknown36d461a3[caller][1][_param1 << 248].field_256 = 0
                  if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > -1:
                          revert with 0, 17
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, (block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime, block.timestamp
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > -1:
                          revert with 0, 17
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime)
                  if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 17
                  if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > -1:
                          revert with 0, 17
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, (block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime, block.timestamp
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > -1:
                          revert with 0, 17
                      if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime)
                  if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      if lockTime <= 0:
                          revert with 0, 'SafeMath: division by zero'
                      if not lockTime:
                          revert with 0, 18
                      if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          if not 0 / lockTime:
                              if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !(0 / lockTime):
                                  revert with 0, 17
                              if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + (0 / lockTime) < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, ((block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime) + (0 / lockTime), block.timestamp
                          else:
                              require ext_code.size(tokenAddr)
                              call tokenAddr.transfer(address to, uint256 tokens) with:
                                   gas gas_remaining wei
                                  args caller, 0 / lockTime
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=ΓÇ▓ 32
                              require ext_call.return_data == bool(ext_call.return_data[0])
                      else:
                          if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 17
                              if ((block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, ((block.timestamp * unknown36d461a3[caller]1 << 248].field_512) - (unknown36d461a3[caller]1 << 248].field_256 * unknown36d461a3[caller]1 << 248].field_512) / lockTime) + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
                          else:
                              require ext_code.size(tokenAddr)
                              call tokenAddr.transfer(address to, uint256 tokens) with:
                                   gas gas_remaining wei
                                  args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=ΓÇ▓ 32
                              require ext_call.return_data == bool(ext_call.return_data[0])
                  else:
                      if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                          revert with 0, 17
                      if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                          revert with 0, 18
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
                          revert with 0, 'SafeMath: multiplication overflow'
                      if lockTime <= 0:
                          revert with 0, 'SafeMath: division by zero'
                      if not lockTime:
                          revert with 0, 18
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                              require ext_code.size(tokenAddr)
                              call tokenAddr.transfer(address to, uint256 tokens) with:
                                   gas gas_remaining wei
                                  args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                      else:
                          if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              if (block.timestamp * unknown36d461a3[caller][1][_param1 << 248].field_512) - (unknown36d461a3[caller][1][_param1 << 248].field_256 * unknown36d461a3[caller][1][_param1 << 248].field_512) / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 17
                          else:
                              require ext_code.size(tokenAddr)
                              call tokenAddr.transfer(address to, uint256 tokens) with:
                                   gas gas_remaining wei
                                  args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=ΓÇ▓ 32
          else:
              if not unknown36d461a3[caller][1][_param1 << 248].field_768:
                  if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768, block.timestamp
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      return unknown36d461a3[caller][1][_param1 << 248].field_768
                  if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 17
                  if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768, block.timestamp
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      return unknown36d461a3[caller][1][_param1 << 248].field_768
                  if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      if lockTime <= 0:
                          revert with 0, 'SafeMath: division by zero'
                      if not lockTime:
                          revert with 0, 18
                      if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          if not 0 / lockTime:
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !(0 / lockTime):
                                  revert with 0, 17
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 + (0 / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + (0 / lockTime), block.timestamp
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !(0 / lockTime):
                                  revert with 0, 17
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 + (0 / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                                  revert with 0, 'SafeMath: addition overflow'
                              return (unknown36d461a3[caller][1][_param1 << 248].field_768 + (0 / lockTime))
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, 0 / lockTime
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= 0 / lockTime
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - (0 / lockTime):
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                          if unknown36d461a3[caller][1][_param1 << 248].field_768 > !(0 / lockTime):
                              revert with 0, 17
                          if unknown36d461a3[caller][1][_param1 << 248].field_768 + (0 / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                              revert with 0, 'SafeMath: addition overflow'
                          log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + (0 / lockTime), block.timestamp
                      else:
                          if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 17
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 17
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                                  revert with 0, 'SafeMath: addition overflow'
                              return (unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048)
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                          if unknown36d461a3[caller][1][_param1 << 248].field_768 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 17
                          if unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                              revert with 0, 'SafeMath: addition overflow'
                          log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
                  else:
                      if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                          revert with 0, 17
                      if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                          revert with 0, 18
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
                          revert with 0, 'SafeMath: multiplication overflow'
                      if lockTime <= 0:
                          revert with 0, 'SafeMath: division by zero'
                      if not lockTime:
                          revert with 0, 18
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          if not (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                                  revert with 0, 17
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime), block.timestamp
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                                  revert with 0, 17
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                                  revert with 0, 'SafeMath: addition overflow'
                              return (unknown36d461a3[caller][1][_param1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime))
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                          if unknown36d461a3[caller][1][_param1 << 248].field_768 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                              revert with 0, 17
                      else:
                          if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 17
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 17
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                                  revert with 0, 'SafeMath: addition overflow'
                              return (unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048)
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                          if unknown36d461a3[caller][1][_param1 << 248].field_768 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 17
              else:
                  require ext_code.size(tokenAddr)
                  call tokenAddr.transfer(address to, uint256 tokens) with:
                       gas gas_remaining wei
                      args caller, unknown36d461a3[caller][1][_param1 << 248].field_768
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=ΓÇ▓ 32
                  require ext_call.return_data == bool(ext_call.return_data[0])
                  if unknown36d461a3[caller][1][_param1 << 248].field_768 > unknown36d461a3[caller][1][_param1 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                      revert with 0, 17
                  unknown36d461a3[caller][1][_param1 << 248].field_768 -= unknown36d461a3[caller][1][_param1 << 248].field_768
                  if 100000 < unknown36d461a3[caller][1][_param1 << 248].field_768 - unknown36d461a3[caller][1][_param1 << 248].field_768:
                      unknown36d461a3[caller][1][_param1 << 248].field_256 = block.timestamp
                  else:
                      unknown36d461a3[caller][1][_param1 << 248].field_512 = 0
                      unknown36d461a3[caller][1][_param1 << 248].field_768 = 0
                      unknown36d461a3[caller][1][_param1 << 248].field_256 = 0
                  if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768, block.timestamp
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      return unknown36d461a3[caller][1][_param1 << 248].field_768
                  if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 17
                  if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768, block.timestamp
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      return unknown36d461a3[caller][1][_param1 << 248].field_768
                  if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      if lockTime <= 0:
                          revert with 0, 'SafeMath: division by zero'
                      if not lockTime:
                          revert with 0, 18
                      if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          if not 0 / lockTime:
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !(0 / lockTime):
                                  revert with 0, 17
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 + (0 / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + (0 / lockTime), block.timestamp
                          else:
                              require ext_code.size(tokenAddr)
                              call tokenAddr.transfer(address to, uint256 tokens) with:
                                   gas gas_remaining wei
                                  args caller, 0 / lockTime
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=ΓÇ▓ 32
                              require ext_call.return_data == bool(ext_call.return_data[0])
                      else:
                          if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 17
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
                          else:
                              require ext_code.size(tokenAddr)
                              call tokenAddr.transfer(address to, uint256 tokens) with:
                                   gas gas_remaining wei
                                  args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=ΓÇ▓ 32
                              require ext_call.return_data == bool(ext_call.return_data[0])
                              if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 'SafeMath: subtraction overflow'
                  else:
                      if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                          revert with 0, 17
                      if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                          revert with 0, 18
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
                          revert with 0, 'SafeMath: multiplication overflow'
                      if lockTime <= 0:
                          revert with 0, 'SafeMath: division by zero'
                      if not lockTime:
                          revert with 0, 18
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          if not (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                                  revert with 0, 17
                          else:
                              require ext_code.size(tokenAddr)
                              call tokenAddr.transfer(address to, uint256 tokens) with:
                                   gas gas_remaining wei
                                  args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=ΓÇ▓ 32
                      else:
                          if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 17
                          else:
                              require ext_code.size(tokenAddr)
                              call tokenAddr.transfer(address to, uint256 tokens) with:
                                   gas gas_remaining wei
                                  args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=ΓÇ▓ 32
      else:
          if lockTime <= 0:
              revert with 0, 'SafeMath: division by zero'
          if not lockTime:
              revert with 0, 18
          if 0 / lockTime <= unknown36d461a3[caller][1][_param1 << 248].field_768:
              if not 0 / lockTime:
                  if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      if 0 / lockTime > -1:
                          revert with 0, 17
                      if 0 / lockTime < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, 0 / lockTime, block.timestamp
                      if 0 / lockTime > -1:
                          revert with 0, 17
                      if 0 / lockTime < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return (0 / lockTime)
                  if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 17
                  if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
                      if 0 / lockTime > -1:
                          revert with 0, 17
                      if 0 / lockTime < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, 0 / lockTime, block.timestamp
                      if 0 / lockTime > -1:
                          revert with 0, 17
                      if 0 / lockTime < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return (0 / lockTime)
                  if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      if lockTime <= 0:
                          revert with 0, 'SafeMath: division by zero'
                      if not lockTime:
                          revert with 0, 18
                      if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          if not 0 / lockTime:
                              if 0 / lockTime > !(0 / lockTime):
                                  revert with 0, 17
                              if 2 * 0 / lockTime < 0 / lockTime:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, 2 * 0 / lockTime, block.timestamp
                              if 0 / lockTime > !(0 / lockTime):
                                  revert with 0, 17
                              if 2 * 0 / lockTime < 0 / lockTime:
                                  revert with 0, 'SafeMath: addition overflow'
                              return (2 * 0 / lockTime)
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, 0 / lockTime
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= 0 / lockTime
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - (0 / lockTime):
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                          if 0 / lockTime > !(0 / lockTime):
                              revert with 0, 17
                          if 2 * 0 / lockTime < 0 / lockTime:
                              revert with 0, 'SafeMath: addition overflow'
                          log 0xbc17dcbe: caller, 2 * 0 / lockTime, block.timestamp
                          if 0 / lockTime > !(0 / lockTime):
                              revert with 0, 17
                          if 2 * 0 / lockTime < 0 / lockTime:
                              revert with 0, 'SafeMath: addition overflow'
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      if unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                      if 0 / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          revert with 0, 17
                      if (0 / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, (0 / lockTime) + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
                      if 0 / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          revert with 0, 17
                      if (0 / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return ((0 / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048)
                  if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 17
                  if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
                      revert with 0, 'SafeMath: multiplication overflow'
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      if not (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                          if 0 / lockTime > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                              revert with 0, 17
                          if (0 / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < 0 / lockTime:
                              revert with 0, 'SafeMath: addition overflow'
                          log 0xbc17dcbe: caller, (0 / lockTime) + ((block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime), block.timestamp
                          if 0 / lockTime > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                              revert with 0, 17
                          if (0 / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < 0 / lockTime:
                              revert with 0, 'SafeMath: addition overflow'
                          return ((0 / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime))
                      require ext_code.size(tokenAddr)
                      call tokenAddr.transfer(address to, uint256 tokens) with:
                           gas gas_remaining wei
                          args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=ΓÇ▓ 32
                      require ext_call.return_data == bool(ext_call.return_data[0])
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                          revert with 0, 17
                      unknowncf6744af[caller][3][_param1 << 248].field_2048 -= (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                      if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                          unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                      else:
                          unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                          unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                      if 0 / lockTime > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                          revert with 0, 17
                      if (0 / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, (0 / lockTime) + ((block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime), block.timestamp
                  else:
                      if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          if 0 / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 17
                          if (0 / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                              revert with 0, 'SafeMath: addition overflow'
                          log 0xbc17dcbe: caller, (0 / lockTime) + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
                          if 0 / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 17
                          if (0 / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                              revert with 0, 'SafeMath: addition overflow'
                          return ((0 / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048)
                      require ext_code.size(tokenAddr)
                      call tokenAddr.transfer(address to, uint256 tokens) with:
                           gas gas_remaining wei
                          args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=ΓÇ▓ 32
                      require ext_call.return_data == bool(ext_call.return_data[0])
                      if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          revert with 0, 17
                      unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
                      if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                      else:
                          unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                          unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                      if 0 / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          revert with 0, 17
                      if (0 / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, (0 / lockTime) + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
              else:
                  require ext_code.size(tokenAddr)
                  call tokenAddr.transfer(address to, uint256 tokens) with:
                       gas gas_remaining wei
                      args caller, 0 / lockTime
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=ΓÇ▓ 32
                  require ext_call.return_data == bool(ext_call.return_data[0])
                  if 0 / lockTime > unknown36d461a3[caller][1][_param1 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[caller][1][_param1 << 248].field_768 < 0 / lockTime:
                      revert with 0, 17
                  unknown36d461a3[caller][1][_param1 << 248].field_768 -= 0 / lockTime
                  if 100000 < unknown36d461a3[caller][1][_param1 << 248].field_768 - (0 / lockTime):
                      unknown36d461a3[caller][1][_param1 << 248].field_256 = block.timestamp
                  else:
                      unknown36d461a3[caller][1][_param1 << 248].field_512 = 0
                      unknown36d461a3[caller][1][_param1 << 248].field_768 = 0
                      unknown36d461a3[caller][1][_param1 << 248].field_256 = 0
                  if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      if 0 / lockTime > -1:
                          revert with 0, 17
                      if 0 / lockTime < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, 0 / lockTime, block.timestamp
                      if 0 / lockTime > -1:
                          revert with 0, 17
                      if 0 / lockTime < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return (0 / lockTime)
                  if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 17
                  if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
                      if 0 / lockTime > -1:
                          revert with 0, 17
                      if 0 / lockTime < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, 0 / lockTime, block.timestamp
                      if 0 / lockTime > -1:
                          revert with 0, 17
                      if 0 / lockTime < 0 / lockTime:
                          revert with 0, 'SafeMath: addition overflow'
                      return (0 / lockTime)
                  if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                          revert with 0, 17
                      if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                          revert with 0, 18
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
                          revert with 0, 'SafeMath: multiplication overflow'
                      if lockTime <= 0:
                          revert with 0, 'SafeMath: division by zero'
                      if not lockTime:
                          revert with 0, 18
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          if not (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                              if 0 / lockTime > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                                  revert with 0, 17
                              if (0 / lockTime) + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < 0 / lockTime:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, (0 / lockTime) + ((block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime), block.timestamp
                          else:
                              require ext_code.size(tokenAddr)
                              call tokenAddr.transfer(address to, uint256 tokens) with:
                                   gas gas_remaining wei
                                  args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=ΓÇ▓ 32
                              require ext_call.return_data == bool(ext_call.return_data[0])
                      else:
                          if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              if 0 / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 17
                              if (0 / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, (0 / lockTime) + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
                          else:
                              require ext_code.size(tokenAddr)
                              call tokenAddr.transfer(address to, uint256 tokens) with:
                                   gas gas_remaining wei
                                  args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=ΓÇ▓ 32
                              require ext_call.return_data == bool(ext_call.return_data[0])
                  else:
                      if lockTime <= 0:
                          revert with 0, 'SafeMath: division by zero'
                      if not lockTime:
                          revert with 0, 18
                      if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          if not 0 / lockTime:
                              if 0 / lockTime > !(0 / lockTime):
                                  revert with 0, 17
                              if 2 * 0 / lockTime < 0 / lockTime:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, 2 * 0 / lockTime, block.timestamp
                              if 0 / lockTime > !(0 / lockTime):
                                  revert with 0, 17
                              if 2 * 0 / lockTime < 0 / lockTime:
                                  revert with 0, 'SafeMath: addition overflow'
                          else:
                              require ext_code.size(tokenAddr)
                              call tokenAddr.transfer(address to, uint256 tokens) with:
                                   gas gas_remaining wei
                                  args caller, 0 / lockTime
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=ΓÇ▓ 32
                              require ext_call.return_data == bool(ext_call.return_data[0])
                              if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 'SafeMath: subtraction overflow'
                              if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                                  revert with 0, 17
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 -= 0 / lockTime
                              if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - (0 / lockTime):
                                  unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                              else:
                                  unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                                  unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                                  unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                      else:
                          if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              if 0 / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 17
                              if (0 / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, (0 / lockTime) + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
                              if 0 / lockTime > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 17
                              if (0 / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                                  revert with 0, 'SafeMath: addition overflow'
                              return ((0 / lockTime) + unknowncf6744af[caller][3][_param1 << 248].field_2048)
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
          else:
              if not unknown36d461a3[caller][1][_param1 << 248].field_768:
                  if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768, block.timestamp
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      return unknown36d461a3[caller][1][_param1 << 248].field_768
                  if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 17
                  if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768, block.timestamp
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      return unknown36d461a3[caller][1][_param1 << 248].field_768
                  if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      if lockTime <= 0:
                          revert with 0, 'SafeMath: division by zero'
                      if not lockTime:
                          revert with 0, 18
                      if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          if 0 / lockTime:
                              require ext_code.size(tokenAddr)
                              call tokenAddr.transfer(address to, uint256 tokens) with:
                                   gas gas_remaining wei
                                  args caller, 0 / lockTime
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=ΓÇ▓ 32
                              require ext_call.return_data == bool(ext_call.return_data[0])
                              if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 'SafeMath: subtraction overflow'
                              if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                                  revert with 0, 17
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 -= 0 / lockTime
                              if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - (0 / lockTime):
                                  unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                              else:
                                  unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                                  unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                                  unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                          if unknown36d461a3[caller][1][_param1 << 248].field_768 > !(0 / lockTime):
                              revert with 0, 17
                          if unknown36d461a3[caller][1][_param1 << 248].field_768 + (0 / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                              revert with 0, 'SafeMath: addition overflow'
                          log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + (0 / lockTime), block.timestamp
                          if unknown36d461a3[caller][1][_param1 << 248].field_768 > !(0 / lockTime):
                              revert with 0, 17
                          if unknown36d461a3[caller][1][_param1 << 248].field_768 + (0 / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                              revert with 0, 'SafeMath: addition overflow'
                          return (unknown36d461a3[caller][1][_param1 << 248].field_768 + (0 / lockTime))
                      if unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      return (unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048)
                  if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 17
                  if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
                      revert with 0, 'SafeMath: multiplication overflow'
                  if lockTime <= 0:
                      revert with 0, 'SafeMath: division by zero'
                  if not lockTime:
                      revert with 0, 18
                  if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      if not (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                          if unknown36d461a3[caller][1][_param1 << 248].field_768 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                              revert with 0, 17
                          if unknown36d461a3[caller][1][_param1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                              revert with 0, 'SafeMath: addition overflow'
                          log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime), block.timestamp
                          if unknown36d461a3[caller][1][_param1 << 248].field_768 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                              revert with 0, 17
                          if unknown36d461a3[caller][1][_param1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                              revert with 0, 'SafeMath: addition overflow'
                          return (unknown36d461a3[caller][1][_param1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime))
                      require ext_code.size(tokenAddr)
                      call tokenAddr.transfer(address to, uint256 tokens) with:
                           gas gas_remaining wei
                          args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=ΓÇ▓ 32
                      require ext_call.return_data == bool(ext_call.return_data[0])
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknowncf6744af[caller][3][_param1 << 248].field_2048 < (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                          revert with 0, 17
                      unknowncf6744af[caller][3][_param1 << 248].field_2048 -= (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                      if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                          unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                      else:
                          unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                          unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime), block.timestamp
                  else:
                      if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          if unknown36d461a3[caller][1][_param1 << 248].field_768 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 17
                          if unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                              revert with 0, 'SafeMath: addition overflow'
                          log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
                          if unknown36d461a3[caller][1][_param1 << 248].field_768 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 17
                          if unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                              revert with 0, 'SafeMath: addition overflow'
                          return (unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048)
                      require ext_code.size(tokenAddr)
                      call tokenAddr.transfer(address to, uint256 tokens) with:
                           gas gas_remaining wei
                          args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=ΓÇ▓ 32
                      require ext_call.return_data == bool(ext_call.return_data[0])
                      if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          revert with 0, 'SafeMath: subtraction overflow'
                      if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          revert with 0, 17
                      unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
                      if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                      else:
                          unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                          unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
              else:
                  require ext_code.size(tokenAddr)
                  call tokenAddr.transfer(address to, uint256 tokens) with:
                       gas gas_remaining wei
                      args caller, unknown36d461a3[caller][1][_param1 << 248].field_768
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=ΓÇ▓ 32
                  require ext_call.return_data == bool(ext_call.return_data[0])
                  if unknown36d461a3[caller][1][_param1 << 248].field_768 > unknown36d461a3[caller][1][_param1 << 248].field_768:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                      revert with 0, 17
                  unknown36d461a3[caller][1][_param1 << 248].field_768 -= unknown36d461a3[caller][1][_param1 << 248].field_768
                  if 100000 < unknown36d461a3[caller][1][_param1 << 248].field_768 - unknown36d461a3[caller][1][_param1 << 248].field_768:
                      unknown36d461a3[caller][1][_param1 << 248].field_256 = block.timestamp
                  else:
                      unknown36d461a3[caller][1][_param1 << 248].field_512 = 0
                      unknown36d461a3[caller][1][_param1 << 248].field_768 = 0
                      unknown36d461a3[caller][1][_param1 << 248].field_256 = 0
                  if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768, block.timestamp
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      return unknown36d461a3[caller][1][_param1 << 248].field_768
                  if unknowncf6744af[caller][3][_param1 << 248].field_1536 > block.timestamp:
                      revert with 0, 'SafeMath: subtraction overflow'
                  if block.timestamp < unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      revert with 0, 17
                  if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 < 1:
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768, block.timestamp
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 > -1:
                          revert with 0, 17
                      if unknown36d461a3[caller][1][_param1 << 248].field_768 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                          revert with 0, 'SafeMath: addition overflow'
                      return unknown36d461a3[caller][1][_param1 << 248].field_768
                  if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                      if block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 and unknowncf6744af[caller][3][_param1 << 248].field_1792 > -1 / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                          revert with 0, 17
                      if not block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536:
                          revert with 0, 18
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / block.timestamp - unknowncf6744af[caller][3][_param1 << 248].field_1536 != unknowncf6744af[caller][3][_param1 << 248].field_1792:
                          revert with 0, 'SafeMath: multiplication overflow'
                      if lockTime <= 0:
                          revert with 0, 'SafeMath: division by zero'
                      if not lockTime:
                          revert with 0, 18
                      if (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          if not (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime:
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime):
                                  revert with 0, 17
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + ((block.timestamp * unknowncf6744af[caller]1 << 248].field_1792) - (unknowncf6744af[caller]1 << 248].field_1536 * unknowncf6744af[caller]1 << 248].field_1792) / lockTime), block.timestamp
                          else:
                              require ext_code.size(tokenAddr)
                              call tokenAddr.transfer(address to, uint256 tokens) with:
                                   gas gas_remaining wei
                                  args caller, (block.timestamp * unknowncf6744af[caller][3][_param1 << 248].field_1792) - (unknowncf6744af[caller][3][_param1 << 248].field_1536 * unknowncf6744af[caller][3][_param1 << 248].field_1792) / lockTime
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=ΓÇ▓ 32
                              require ext_call.return_data == bool(ext_call.return_data[0])
                      else:
                          if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 17
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
                          else:
                              require ext_code.size(tokenAddr)
                              call tokenAddr.transfer(address to, uint256 tokens) with:
                                   gas gas_remaining wei
                                  args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=ΓÇ▓ 32
                              require ext_call.return_data == bool(ext_call.return_data[0])
                              if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 'SafeMath: subtraction overflow'
                  else:
                      if lockTime <= 0:
                          revert with 0, 'SafeMath: division by zero'
                      if not lockTime:
                          revert with 0, 18
                      if 0 / lockTime <= unknowncf6744af[caller][3][_param1 << 248].field_2048:
                          if not 0 / lockTime:
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !(0 / lockTime):
                                  revert with 0, 17
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 + (0 / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + (0 / lockTime), block.timestamp
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !(0 / lockTime):
                                  revert with 0, 17
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 + (0 / lockTime) < unknown36d461a3[caller][1][_param1 << 248].field_768:
                                  revert with 0, 'SafeMath: addition overflow'
                              return (unknown36d461a3[caller][1][_param1 << 248].field_768 + (0 / lockTime))
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, 0 / lockTime
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if 0 / lockTime > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < 0 / lockTime:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= 0 / lockTime
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - (0 / lockTime):
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
                      else:
                          if not unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 17
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                                  revert with 0, 'SafeMath: addition overflow'
                              log 0xbc17dcbe: caller, unknown36d461a3[caller]1 << 248].field_768 + unknowncf6744af[caller]1 << 248].field_2048, block.timestamp
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 > !unknowncf6744af[caller][3][_param1 << 248].field_2048:
                                  revert with 0, 17
                              if unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknown36d461a3[caller][1][_param1 << 248].field_768:
                                  revert with 0, 'SafeMath: addition overflow'
                              return (unknown36d461a3[caller][1][_param1 << 248].field_768 + unknowncf6744af[caller][3][_param1 << 248].field_2048)
                          require ext_code.size(tokenAddr)
                          call tokenAddr.transfer(address to, uint256 tokens) with:
                               gas gas_remaining wei
                              args caller, unknowncf6744af[caller][3][_param1 << 248].field_2048
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=ΓÇ▓ 32
                          require ext_call.return_data == bool(ext_call.return_data[0])
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 > unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 'SafeMath: subtraction overflow'
                          if unknowncf6744af[caller][3][_param1 << 248].field_2048 < unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              revert with 0, 17
                          unknowncf6744af[caller][3][_param1 << 248].field_2048 -= unknowncf6744af[caller][3][_param1 << 248].field_2048
                          if 10000 < unknowncf6744af[caller][3][_param1 << 248].field_2048 - unknowncf6744af[caller][3][_param1 << 248].field_2048:
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = block.timestamp
                          else:
                              unknowncf6744af[caller][3][_param1 << 248].field_1792 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_2048 = 0
                              unknowncf6744af[caller][3][_param1 << 248].field_1536 = 0
  else:
      if 1584683998 == uint32(call.func_hash) >> 224:
          require not call.value
          return unknown5e745bde
      if tokenAddr() == uint32(call.func_hash) >> 224:
          require not call.value
          return tokenAddr
      require 1615363083 == uint32(call.func_hash) >> 224
      require calldata.size - 4 >=ΓÇ▓ 96
      require _param1 == addr(_param1)
      require _param2 == addr(_param2)
      require _param3 == uint8(_param3)
      if stor2 == 2:
          revert with 0, 'ReentrancyGuard: reentrant call'
      stor2 = 2
      if not open:
          revert with 0, 'no open'
      if caller != tx.origin:
          revert with 0, 'not allowed'
      require ext_code.size(priceAddress)
      static call priceAddress.0xe9de5ee9 with:
              gas gas_remaining wei
             args addr(unknownaf589da3Address), call.value, unknown1554e1ceAddress, fee
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >=ΓÇ▓ 32
      if ext_call.return_data < unknown5e745bde:
          revert with 0, 'Wrong amount'
      if ext_call.return_data > unknown89d4cce8:
          revert with 0, 'Wrong amount'
      if ext_call.return_data > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
          revert with 0, 17
      if 10^12 * ext_call.return_data and unknown1950833a > -1 / 10^12 * ext_call.return_data[0]:
          revert with 0, 17
      if not changeAmount:
          revert with 0, 18
      if unknowne0dabadd > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
          revert with 0, 17
      if unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowne0dabadd:
          revert with 0, 'SafeMath: addition overflow'
      if unknowne0dabadd + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) > unknownbf383450:
          revert with 0, 'Tokens with deficiencies'
      if unknowncf6744af[caller].field_256:
          if unknowncf6744af[caller][3][_param3 << 248].field_0 > !(10^12 * ext_call.return_data[0]):
              revert with 0, 17
          if unknowncf6744af[caller][3][_param3 << 248].field_0 + (10^12 * ext_call.return_data < unknowncf6744af[caller][3][_param3 << 248].field_0:
              revert with 0, 'SafeMath: addition overflow'
          unknowncf6744af[caller][3][_param3 << 248].field_0 += 10^12 * ext_call.return_data[0]
          if unknowncf6744af[caller][3][_param3 << 248].field_256 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
              revert with 0, 17
          if unknowncf6744af[caller][3][_param3 << 248].field_256 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowncf6744af[caller][3][_param3 << 248].field_256:
              revert with 0, 'SafeMath: addition overflow'
          unknowncf6744af[caller][3][_param3 << 248].field_256 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
          if unknowncf6744af[caller][3][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
              revert with 0, 17
          if unknowncf6744af[caller][3][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowncf6744af[caller][3][_param3 << 248].field_768:
              revert with 0, 'SafeMath: addition overflow'
          unknowncf6744af[caller][3][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
          if unknowncf6744af[caller][3][_param3 << 248].field_1024 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
              revert with 0, 17
          if unknowncf6744af[caller][3][_param3 << 248].field_1024 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowncf6744af[caller][3][_param3 << 248].field_1024:
              revert with 0, 'SafeMath: addition overflow'
          unknowncf6744af[caller][3][_param3 << 248].field_1024 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
          if not unknowncf6744af[caller][3][_param3 << 248].field_512:
              unknowncf6744af[caller][3][_param3 << 248].field_512 = block.timestamp
          if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
              if unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1280 > -1:
                  revert with 0, 17
              if unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1280 < unknowncf6744af[unknowncf6744af[caller].field_256][3][_param3 << 248].field_1280:
                  revert with 0, 'SafeMath: addition overflow'
          else:
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown77bbaf8b > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  revert with 0, 17
              if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  revert with 0, 18
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown77bbaf8b:
                  revert with 0, 'SafeMath: multiplication overflow'
      else:
          if not addr(_param1):
              revert with 0, 'Referees must'
          if unknowncf6744af[addr(_param1)].field_256:
              unknowncf6744af[caller].field_0 = unknowncf6744af[addr(_param1)].field_0
              unknowncf6744af[caller].field_256 = addr(_param1)
              if unknowncf6744af[addr(_param1)].field_512 == -1:
                  revert with 0, 17
              unknowncf6744af[addr(_param1)].field_512++
              if unknowncf6744af[caller][3][_param3 << 248].field_0 > !(10^12 * ext_call.return_data[0]):
                  revert with 0, 17
              if unknowncf6744af[caller][3][_param3 << 248].field_0 + (10^12 * ext_call.return_data < unknowncf6744af[caller][3][_param3 << 248].field_0:
                  revert with 0, 'SafeMath: addition overflow'
              unknowncf6744af[caller][3][_param3 << 248].field_0 += 10^12 * ext_call.return_data[0]
              if unknowncf6744af[caller][3][_param3 << 248].field_256 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
                  revert with 0, 17
              if unknowncf6744af[caller][3][_param3 << 248].field_256 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowncf6744af[caller][3][_param3 << 248].field_256:
                  revert with 0, 'SafeMath: addition overflow'
              unknowncf6744af[caller][3][_param3 << 248].field_256 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
              if unknowncf6744af[caller][3][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
                  revert with 0, 17
              if unknowncf6744af[caller][3][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowncf6744af[caller][3][_param3 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              unknowncf6744af[caller][3][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
              if unknowncf6744af[caller][3][_param3 << 248].field_1024 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
                  revert with 0, 17
              if unknowncf6744af[caller][3][_param3 << 248].field_1024 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowncf6744af[caller][3][_param3 << 248].field_1024:
                  revert with 0, 'SafeMath: addition overflow'
              unknowncf6744af[caller][3][_param3 << 248].field_1024 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
              if not unknowncf6744af[caller][3][_param3 << 248].field_512:
                  unknowncf6744af[caller][3][_param3 << 248].field_512 = block.timestamp
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown77bbaf8b > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      revert with 0, 17
                  if not 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      revert with 0, 18
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount * unknown77bbaf8b / 10^12 * ext_call.return_data * unknown1950833a / changeAmount != unknown77bbaf8b:
                      revert with 0, 'SafeMath: multiplication overflow'
          else:
              if not addr(_param2):
                  revert with 0, 'Vertex must'
              if unknown36d461a3[addr(_param2)].field_0 != addr(_param2):
                  revert with 0, 'Wrong usertop'
              unknowncf6744af[addr(_param1)].field_0 = addr(_param2)
              unknowncf6744af[addr(_param1)].field_256 = addr(_param2)
              if unknowncf6744af[addr(_param2)].field_512 == -1:
                  revert with 0, 17
              unknowncf6744af[addr(_param2)].field_512++
              unknowncf6744af[caller].field_0 = unknowncf6744af[addr(_param1)].field_0
              unknowncf6744af[caller].field_256 = addr(_param1)
              if unknowncf6744af[addr(_param1)].field_512 == -1:
                  revert with 0, 17
              unknowncf6744af[addr(_param1)].field_512++
              if unknowncf6744af[caller][3][_param3 << 248].field_0 > !(10^12 * ext_call.return_data[0]):
                  revert with 0, 17
              if unknowncf6744af[caller][3][_param3 << 248].field_0 + (10^12 * ext_call.return_data < unknowncf6744af[caller][3][_param3 << 248].field_0:
                  revert with 0, 'SafeMath: addition overflow'
              unknowncf6744af[caller][3][_param3 << 248].field_0 += 10^12 * ext_call.return_data[0]
              if unknowncf6744af[caller][3][_param3 << 248].field_256 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
                  revert with 0, 17
              if unknowncf6744af[caller][3][_param3 << 248].field_256 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowncf6744af[caller][3][_param3 << 248].field_256:
                  revert with 0, 'SafeMath: addition overflow'
              unknowncf6744af[caller][3][_param3 << 248].field_256 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
              if unknowncf6744af[caller][3][_param3 << 248].field_768 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
                  revert with 0, 17
              if unknowncf6744af[caller][3][_param3 << 248].field_768 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowncf6744af[caller][3][_param3 << 248].field_768:
                  revert with 0, 'SafeMath: addition overflow'
              unknowncf6744af[caller][3][_param3 << 248].field_768 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
              if unknowncf6744af[caller][3][_param3 << 248].field_1024 > !(10^12 * ext_call.return_data * unknown1950833a / changeAmount):
                  revert with 0, 17
              if unknowncf6744af[caller][3][_param3 << 248].field_1024 + (10^12 * ext_call.return_data * unknown1950833a / changeAmount) < unknowncf6744af[caller][3][_param3 << 248].field_1024:
                  revert with 0, 'SafeMath: addition overflow'
              unknowncf6744af[caller][3][_param3 << 248].field_1024 += 10^12 * ext_call.return_data * unknown1950833a / changeAmount
              if not unknowncf6744af[caller][3][_param3 << 248].field_512:
                  unknowncf6744af[caller][3][_param3 << 248].field_512 = block.timestamp
              if 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                  if 10^12 * ext_call.return_data * unknown1950833a / changeAmount and unknown77bbaf8b > -1 / 10^12 * ext_call.return_data * unknown1950833a / changeAmount:
                      revert with 0, 17
  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)


